lambda <- exp(0)  # No neighbors
} else {
eta <- sum(theta[s, neighbors] * x_current[neighbors])
lambda <- exp(eta)
}
# Sample new value for variable s
x_current[s] <- rpois(1, lambda = lambda)
}
# Store after burn-in
if (iter > burn_in) {
X[iter - burn_in, ] <- x_current  # Correct assignment
}
}
return(t(X))
}
# fit Original Poisson Graphical Model
fit_Original_Poisson_Graphical_Model <- function(data, lambda) {
adjacency <- matrix(0, nrow=p, ncol= p)
p <- nrow(data) # number of nodes
n <- ncol(data) # number of samples
for (s in 1:p) {
y <- X[s, ]
X_other <- X[-s,]
fit <- glmnet(
x = t(X_other),
y = y,
family = "poisson",
alpha = 1,          # Lasso penalty
lambda = lambda,
standardize = TRUE
)
# Extract coefficients at optimal lambda (excluding intercept)
coefs <- as.vector(coef(fit))[-1]
# Mark non-zero coefficients as edges (excluding intercept)
adjacency[s, -s] <- (abs(coefs) > 1e-6) * 1  # Binary adjacency
adjacency[-s, s] <- (abs(coefs) > 1e-6) * 1  # symmetry
}
return(adjacency)
}
calculate_success_rate <- function(true_adj, pred_adj) {
# Convert to binary (0/1) matrices if not already
true_binary <- (true_adj != 0) * 1
pred_binary <- (pred_adj != 0) * 1
# Check if ALL elements match exactly
all(true_binary == pred_binary) * 1  # Returns 1 (success) or 0 (failure)
}
results_list <- list() # storage results
N_range <- c(100 * (1:12))
Norm_range <- numeric(length = length(N_range))
Success_range <- numeric(length = length(N_range))
# p_values <- c(64, 100, 169, 225)
p_values <- c(64)
M <- 50
omega <- 0.1         # Edge weight (negative for Poisson PGM)
for (p in p_values) {
message(paste("\nRunning experiments for p =", p))
# Generate 4-nearest neighbor lattice graph
adj_matrix <- make_lattice(length = sqrt(p), dim = 2, nei = 2) |>
as_adjacency_matrix(sparse = FALSE)
diag(adj_matrix) <- 0 # Remove self-loops
for (N in 1:length(N_range)) {
message(paste0("Current n = ", N_range[N]))
n <- N_range[N]
tmp_AUC <- numeric(length = M)
tmp_norm <- numeric(length = M)
tmp_success <- numeric(length = M)
for (m in 1:M){
X <- simulate_pgm_data(adj_matrix, n, omega)
THETA <- fit_Original_Poisson_Graphical_Model(data = X, lambda = sqrt(log(p) / n))
# attach result to store
tmp_norm[m] <- norm(adj_matrix-THETA, type = "F")
tmp_success[m] <- calculate_success_rate(adj_matrix, THETA)
# tmp_AUC[m] <- auc_roc_analysis(adj_matrix, THETA)
}
Success_range[N] <- mean(tmp_success)
# AUC_range[N] <- mean(tmp_AUC)
Norm_range[N] <- mean(tmp_norm)
}
# Store results for this p
results_list[[as.character(p)]] <- list(
p = p,
N_range = N_range,
Success_range = Success_range,
Norm_range = Norm_range
)
}
p = 64
message(paste("\nRunning experiments for p =", p))
# Generate 4-nearest neighbor lattice graph
adj_matrix <- make_lattice(length = sqrt(p), dim = 2, nei = 2) |>
as_adjacency_matrix(sparse = FALSE)
diag(adj_matrix) <- 0 # Remove self-loops
View(X)
source("~/Documents/Duke University/Courses/STA 841 Categotrical Data Analysis/Poisson-Graphical-Models/PGM_from_zero/Relationship_n_vs_auc (OPGM).R")
# Function to simulate Poisson PGM data via Gibbs sampling
simulate_pgm_data <- function(adj_matrix, n, omega, burn_in = 100) {
p <- nrow(adj_matrix)
X <- matrix(0, nrow = n, ncol = p)  # Samples in rows, variables in columns
theta <- adj_matrix * omega
# Improved initialization
x_current <- rpois(p, lambda = 1)  # Start from random Poisson values
for (iter in 1:(burn_in + n)) {
for (s in 1:p) {
neighbors <- which(theta[s, ] != 0)
eta <- sum(theta[s, neighbors] * x_current[neighbors])
x_current[s] <- rpois(1, lambda = exp(eta))
}
if (iter > burn_in) X[iter - burn_in, ] <- x_current
}
return(t(X))
}
source("~/Documents/Duke University/Courses/STA 841 Categotrical Data Analysis/Poisson-Graphical-Models/PGM_from_zero/Relationship_n_vs_auc (OPGM).R")
plot(N_range, results_list[["64"]]$Success_range, type = "b", col = 1,
ylim = c(0, 1), xlab = "Sample Size (n)", ylab = "Success Rate",
main = "Edge Recovery Performance")
View(adj_matrix)
# Generate 4-nearest neighbor lattice graph
adj_matrix <- make_lattice(length = sqrt(p), dim = 2, nei = 2) |>
as_adjacency_matrix(sparse = FALSE)
# Generate 4-nearest neighbor lattice graph
adj_matrix <- make_lattice(length = sqrt(p), dim = 2, nei = 2) |>
as_adjacency_matrix(sparse = FALSE)
# Generate 4-nearest neighbor lattice graph
adj_matrix <- make_lattice(length = sqrt(p), dim = 2, nei = 2) |>
as_adjacency_matrix(sparse = FALSE)
# Generate 4-nearest neighbor lattice graph
adj_matrix <- make_lattice(length = sqrt(p), dim = 2, nei = 2) |>
as_adjacency_matrix(sparse = FALSE)
# Generate 4-nearest neighbor lattice graph
adj_matrix <- make_lattice(length = sqrt(p), dim = 2, nei = 2) |>
as_adjacency_matrix(sparse = FALSE)
# Generate 4-nearest neighbor lattice graph
adj_matrix <- make_lattice(length = sqrt(p), dim = 2, nei = 2) |>
as_adjacency_matrix(sparse = FALSE)
make_lattice(dimvector = c(10, 10), nei = 1, circular = FALSE)
make_lattice(dimvector = c(10, 10), nei = 1, circular = FALSE) %>% as_adjacency_matrix(spase=F)
make_lattice(dimvector = c(10, 10), nei = 1, circular = FALSE) %>% as_adjacency_matrix(sparse=F)
source("~/Documents/Duke University/Courses/STA 841 Categotrical Data Analysis/Poisson-Graphical-Models/PGM_from_zero/Relationship_n_vs_auc (OPGM).R")
# Generate 4-nearest neighbor lattice graph
adj_matrix <- make_lattice(c(p,p), dim = 2, nei = 1) |>
as_adjacency_matrix(sparse = FALSE)
# Generate 4-nearest neighbor lattice graph
adj_matrix <- make_lattice(c(p,p) nei = 1) |>
# Generate 4-nearest neighbor lattice graph
adj_matrix <- make_lattice(c(p,p), nei = 1) |>
as_adjacency_matrix(sparse = FALSE)
diag(adj_matrix) <- 0 # Remove self-loops
View(adj_matrix)
# Generate 4-nearest neighbor lattice graph
adj_matrix <- make_lattice(dimvector = c(p,p), nei = 1) |>
as_adjacency_matrix(sparse = FALSE)
diag(adj_matrix) <- 0 # Remove self-loops
View(adj_matrix)
# Generate 4-nearest neighbor lattice graph
adj_matrix <- make_lattice(dimvector = c(sqrt(p), sqrt(p)), nei = 1, circular = FALSE) |>
as_adjacency_matrix(sparse = FALSE)
source("~/Documents/Duke University/Courses/STA 841 Categotrical Data Analysis/Poisson-Graphical-Models/PGM_from_zero/Relationship_n_vs_auc (OPGM).R")
source("~/Documents/Duke University/Courses/STA 841 Categotrical Data Analysis/Poisson-Graphical-Models/PGM_from_zero/Relationship_n_vs_auc (OPGM).R")
plot(N_range, results_list[["64"]]$Success_range, type = "b", col = 1,
ylim = c(0.85, 0.9), xlab = "Sample Size (n)", ylab = "Success Rate",
main = "Edge Recovery Performance")
plot(N_range, results_list[["64"]]$Success_range, type = "b", col = 1,
ylim = c(0.85, 1), xlab = "Sample Size (n)", ylab = "Success Rate",
main = "Edge Recovery Performance")
source("~/Documents/Duke University/Courses/STA 841 Categotrical Data Analysis/Poisson-Graphical-Models/PGM_from_zero/Relationship_n_vs_auc (OPGM).R")
plot(N_range, results_list[["64"]]$Success_range, type = "b", col = 1,
ylim = c(0.8, 1), xlab = "Sample Size (n)", ylab = "Success Rate",
main = "Edge Recovery Performance")
lines(N_range, results_list[["100"]]$Success_range, type = "b", col = 2)
legend("bottom", legend = paste("p =", p_values), col = 1:4, lty = 1, pch = 1)
View(adj_matrix)
View(X)
nrow(X)
source("~/Documents/Duke University/Courses/STA 841 Categotrical Data Analysis/Poisson-Graphical-Models/PGM_from_zero/Relationship_n_vs_auc (OPGM).R")
s = 1
source("~/Documents/Duke University/Courses/STA 841 Categotrical Data Analysis/Poisson-Graphical-Models/PGM_from_zero/Relationship_n_vs_auc (OPGM).R")
source("~/Documents/Duke University/Courses/STA 841 Categotrical Data Analysis/Poisson-Graphical-Models/PGM_from_zero/Relationship_n_vs_auc (OPGM).R")
# Generate 4-nearest neighbor lattice graph
adj_matrix <- make_lattice(dimvector = c(sqrt(p), sqrt(p)), nei = 1, circular = FALSE) |>
as_adjacency_matrix(sparse = FALSE)
diag(adj_matrix) <- 0 # Remove self-loops
View(adj_matrix)
# Generate 4-nearest neighbor lattice graph
adj_matrix <- make_lattice(dimvector = c(sqrt(p), sqrt(p)), nei = 1, circular = FALSE) |>
as_adjacency_matrix(sparse = FALSE)
# Generate 4-nearest neighbor lattice graph
adj_matrix <- make_lattice(dimvector = c(p, p), nei = 1, circular = FALSE) |>
as_adjacency_matrix(sparse = FALSE)
# Generate 4-nearest neighbor lattice graph
adj_matrix <- make_lattice(dimvector = c(sqrt(p), sqrt(p)), nei = 1, circular = FALSE) |>
as_adjacency_matrix(sparse = FALSE)
# Generate 4-nearest neighbor lattice graph
adj_matrix <- adj_matrix <- make_lattice(length = sqrt(p), dim = 2, nei = 2, circular = FALSE) |>
as_adjacency_matrix(sparse = FALSE)
# Generate 4-nearest neighbor lattice graph
adj_matrix <- adj_matrix <- make_lattice(length = sqrt(p), dim = 2, nei = 1, circular = FALSE) |>
as_adjacency_matrix(sparse = FALSE)
# Generate 4-nearest neighbor lattice graph
adj_matrix <- make_lattice(length = sqrt(p), dim = 2, nei = 1, circular = FALSE) |>
as_adjacency_matrix(sparse = FALSE)
source("~/Documents/Duke University/Courses/STA 841 Categotrical Data Analysis/Poisson-Graphical-Models/PGM_from_zero/Relationship_n_vs_auc (OPGM).R")
p
# Generate 4-nearest neighbor lattice graph
adj_matrix <- make_lattice(length = sqrt(p), dim = 2, nei = 1, circular = FALSE) |>
as_adjacency_matrix(sparse = FALSE)
# Generate 4-nearest neighbor lattice graph
adj_matrix <- make_lattice(length = sqrt(p), dim = 2, nei = 2) |>
as_adjacency_matrix(sparse = FALSE)
# Generate 4-nearest neighbor lattice graph
adj_matrix <- make_lattice(length = sqrt(100), dim = 2, nei = 2) |>
as_adjacency_matrix(sparse = FALSE)
# Generate 4-nearest neighbor lattice graph
adj_matrix <- make_lattice(length = sqrt(p), dim = 2, nei = 2) |>
as_adjacency_matrix(sparse = FALSE)
# Generate 4-nearest neighbor lattice graph
adj_matrix <- make_lattice(length = sqrt(64), dim = 2, nei = 2) |>
as_adjacency_matrix(sparse = FALSE)
# Generate 4-nearest neighbor lattice graph
adj_matrix <- make_lattice(length = sqrt(100), dim = 2, nei = 2) |>
as_adjacency_matrix(sparse = FALSE)
# Generate 4-nearest neighbor lattice graph
adj_matrix <- make_lattice(length = sqrt(169), dim = 2, nei = 2) |>
as_adjacency_matrix(sparse = FALSE)
source("~/Documents/Duke University/Courses/STA 841 Categotrical Data Analysis/Poisson-Graphical-Models/PGM_from_zero/Relationship_n_vs_auc (OPGM).R")
plot(N_range, results_list[["64"]]$Success_range, type = "b", col = 1,
ylim = c(0.8, 1), xlab = "Sample Size (n)", ylab = "Success Rate",
main = "Edge Recovery Performance")
plot(N_range, results_list[["16"]]$Success_range, type = "b", col = 1,
ylim = c(0.8, 1), xlab = "Sample Size (n)", ylab = "Success Rate",
main = "Edge Recovery Performance")
plot(N_range, results_list[["16"]]$Success_range, type = "b", col = 1,
ylim = c(0, 1), xlab = "Sample Size (n)", ylab = "Success Rate",
main = "Edge Recovery Performance")
lines(N_range, results_list[["36"]]$Success_range, type = "b", col = 2)
(1:15:2)
seq(from = 1, to = 15, by = 2)
source("~/Documents/Duke University/Courses/STA 841 Categotrical Data Analysis/Poisson-Graphical-Models/PGM_from_zero/Relationship_n_vs_auc (OPGM).R")
source("~/Documents/Duke University/Courses/STA 841 Categotrical Data Analysis/Poisson-Graphical-Models/PGM_from_zero/Relationship_n_vs_auc (OPGM).R")
View(THETA)
View(adj_matrix)
source("~/Documents/Duke University/Courses/STA 841 Categotrical Data Analysis/Poisson-Graphical-Models/PGM_from_zero/Relationship_n_vs_auc (OPGM).R")
source("~/Documents/Duke University/Courses/STA 841 Categotrical Data Analysis/Poisson-Graphical-Models/PGM_from_zero/Relationship_n_vs_auc (OPGM).R")
source("~/Documents/Duke University/Courses/STA 841 Categotrical Data Analysis/Poisson-Graphical-Models/PGM_from_zero/Relationship_n_vs_auc (OPGM).R")
source("~/Documents/Duke University/Courses/STA 841 Categotrical Data Analysis/Poisson-Graphical-Models/PGM_from_zero/Relationship_n_vs_auc (OPGM).R")
source("~/Documents/Duke University/Courses/STA 841 Categotrical Data Analysis/Poisson-Graphical-Models/PGM_from_zero/Relationship_n_vs_auc (OPGM).R")
heatmap(adj_matrix, Rowv = NA, Colv = NA)
heatmap(THETA, Rowv = NA, Colv = NA)
source("~/Documents/Duke University/Courses/STA 841 Categotrical Data Analysis/Poisson-Graphical-Models/PGM_from_zero/Relationship_n_vs_auc (OPGM).R")
source("~/Documents/Duke University/Courses/STA 841 Categotrical Data Analysis/Poisson-Graphical-Models/PGM_from_zero/Relationship_n_vs_auc (OPGM).R")
source("~/Documents/Duke University/Courses/STA 841 Categotrical Data Analysis/Poisson-Graphical-Models/PGM_from_zero/Relationship_n_vs_auc (OPGM).R")
source("~/Documents/Duke University/Courses/STA 841 Categotrical Data Analysis/Poisson-Graphical-Models/PGM_from_zero/Relationship_n_vs_auc (OPGM).R")
plot(N_range, results_list[["16"]]$Success_range, type = "b", col = 1,
ylim = c(0, 1), xlab = "Sample Size (n)", ylab = "Success Rate",
main = "Edge Recovery Performance")
View(results_list)
image(adj_matrix)
View(THETA)
image(THETA)
source("~/Documents/Duke University/Courses/STA 841 Categotrical Data Analysis/Poisson-Graphical-Models/PGM_from_zero/Relationship_n_vs_auc (OPGM).R")
plot(N_range, results_list[["16"]]$Success_range, type = "b", col = 1,
ylim = c(0, 1), xlab = "Sample Size (n)", ylab = "Success Rate",
main = "Edge Recovery Performance")
image(adj_matrix)
image(THETA)
View(THETA)
source("~/Documents/Duke University/Courses/STA 841 Categotrical Data Analysis/Poisson-Graphical-Models/PGM_from_zero/Relationship_n_vs_auc (OPGM).R")
source("~/Documents/Duke University/Courses/STA 841 Categotrical Data Analysis/Poisson-Graphical-Models/PGM_from_zero/Relationship_n_vs_auc (OPGM).R")
image(THETA)
source("~/Documents/Duke University/Courses/STA 841 Categotrical Data Analysis/Poisson-Graphical-Models/PGM_from_zero/Relationship_n_vs_auc (OPGM).R")
source("~/Documents/Duke University/Courses/STA 841 Categotrical Data Analysis/Poisson-Graphical-Models/PGM_from_zero/Relationship_n_vs_auc (OPGM).R")
source("~/Documents/Duke University/Courses/STA 841 Categotrical Data Analysis/Poisson-Graphical-Models/PGM_from_zero/Relationship_n_vs_auc (OPGM).R")
source("~/Documents/Duke University/Courses/STA 841 Categotrical Data Analysis/Poisson-Graphical-Models/PGM_from_zero/Relationship_n_vs_auc (OPGM).R")
plot(N_range, results_list[["9"]]$Success_range, type = "b", col = 1,
ylim = c(0, 1), xlab = "Sample Size (n)", ylab = "Success Rate",
main = "Edge Recovery Performance")
source("~/Documents/Duke University/Courses/STA 841 Categotrical Data Analysis/Poisson-Graphical-Models/PGM_from_zero/Relationship_n_vs_auc (OPGM).R")
source("~/Documents/Duke University/Courses/STA 841 Categotrical Data Analysis/Poisson-Graphical-Models/PGM_from_zero/Relationship_n_vs_auc (OPGM).R")
plot(N_range, results_list[["4"]]$Success_range, type = "b", col = 1,
ylim = c(0, 1), xlab = "Sample Size (n)", ylab = "Success Rate",
main = "Edge Recovery Performance")
source("~/Documents/Duke University/Courses/STA 841 Categotrical Data Analysis/Poisson-Graphical-Models/PGM_from_zero/Relationship_n_vs_auc (OPGM).R")
source("~/Documents/Duke University/Courses/STA 841 Categotrical Data Analysis/Poisson-Graphical-Models/PGM_from_zero/Relationship_n_vs_auc (OPGM).R")
# N_range <- c(20, 50, 70, 80, 100 * seq(from = 1, to = 15, by = 2))
# N_range <- 1e5 * seq(from = 10, to = 15, by = 2)
N_range <- 1e4 * seq(from = 1, to = 100, ny = 20)
seq(from = 10, to = 100, by = 20)
# N_range <- c(20, 50, 70, 80, 100 * seq(from = 1, to = 15, by = 2))
# N_range <- 1e5 * seq(from = 10, to = 15, by = 2)
N_range <- 1e4 * seq(from = 10, to = 110, by = 20)
# N_range <- c(20, 50, 70, 80, 100 * seq(from = 1, to = 15, by = 2))
# N_range <- 1e5 * seq(from = 10, to = 15, by = 2)
N_range <- 1e4 * seq(from = 10, to = 20, by = 2)
# N_range <- c(20, 50, 70, 80, 100 * seq(from = 1, to = 15, by = 2))
# N_range <- 1e5 * seq(from = 10, to = 15, by = 2)
N_range <- 1e4 * seq(from = 1, to = 20, by = 2)
# N_range <- c(20, 50, 70, 80, 100 * seq(from = 1, to = 15, by = 2))
# N_range <- 1e5 * seq(from = 10, to = 15, by = 2)
N_range <- 1e4 * seq(from = 1, to = 20, by = 3)
N_range
# N_range <- c(20, 50, 70, 80, 100 * seq(from = 1, to = 15, by = 2))
# N_range <- 1e5 * seq(from = 10, to = 15, by = 2)
N_range <- 1e4 * seq(from = 1, to = 30, by = 4)
N_range
source("~/Documents/Duke University/Courses/STA 841 Categotrical Data Analysis/Poisson-Graphical-Models/PGM_from_zero/Relationship_n_vs_auc (OPGM).R")
# N_range <- c(20, 50, 70, 80, 100 * seq(from = 1, to = 15, by = 2))
# N_range <- 1e5 * seq(from = 10, to = 15, by = 2)
N_range <- c(100*(1:9), 1000 * (1:9), 1e4 * seq(from = 1, to = 30, by = 4))
N_range
source("~/Documents/Duke University/Courses/STA 841 Categotrical Data Analysis/Poisson-Graphical-Models/PGM_from_zero/Relationship_n_vs_auc (OPGM).R")
plot(N_range, results_list[["4"]]$Success_range, type = "b", col = 1,
ylim = c(0, 1), xlab = "Sample Size (n)", ylab = "Success Rate",
main = "Edge Recovery Performance")
lines(N_range, results_list[["9"]]$Success_range, type = "b", col = 2)
lines(N_range, results_list[["16"]]$Success_range, type = "b", col = 3)
saveRDS(results_list, file = "./Edge_recovery_performance.RDA")
c <- load(file = "Edge_recovery_performance.RDA")
load("~/Documents/Duke University/Courses/STA 841 Categotrical Data Analysis/Poisson-Graphical-Models/Edge_recovery_performance.RDA")
data.frame(results_list)
saveRDS(data.frame(results_list), file = "./Edge_recovery_performance.Rda")
load(file = "Edge_recovery_performance.RDA")
saveRDS(data.frame(results_list), file = "./Edge_recovery_performance.RData")
readRDS(file = "Edge_recovery_performance.RDA")
saveRDS(results_list, file = "./Edge_recovery_performance.RData")
readRDS(file = "Edge_recovery_performance.RDA")
readRDS(file = "Edge_recovery_performance.RData")
source("~/Documents/Duke University/Courses/STA 841 Categotrical Data Analysis/Poisson-Graphical-Models/PGM_from_zero/Relationship_n_vs_auc (OPGM).R")
View(results_list)
source("~/Documents/Duke University/Courses/STA 841 Categotrical Data Analysis/Poisson-Graphical-Models/PGM_from_zero/Relationship_n_vs_auc (OPGM).R")
# N_range <- c(20, 50, 70, 80, 100 * seq(from = 1, to = 15, by = 2))
# N_range <- 1e5 * seq(from = 10, to = 15, by = 2)
N_range <- c(100*(1:9), 1000 * (1: 9), 1e4 * seq(from = 1, to = 30, by = 4))
N_ranger
N_range
source("~/Documents/Duke University/Courses/STA 841 Categotrical Data Analysis/Poisson-Graphical-Models/PGM_from_zero/Relationship_n_vs_auc (OPGM).R")
plot(N_range, results_list[["4"]]$Success_range, type = "b", col = 1,
ylim = c(0, 1), xlab = "Sample Size (n)", ylab = "Success Rate",
main = "Edge Recovery Performance")
plot(N_range[1:10], results_list[["4"]]$Success_range[1:10], type = "b", col = 1,
ylim = c(0, 1), xlab = "Sample Size (n)", ylab = "Success Rate",
main = "Edge Recovery Performance")
plot(N_range[1:13], results_list[["4"]]$Success_range[1:13], type = "b", col = 1,
ylim = c(0, 1), xlab = "Sample Size (n)", ylab = "Success Rate",
main = "Edge Recovery Performance")
plot(N_range, results_list[["4"]]$Success_range, type = "b", col = 1,
ylim = c(0, 1), xlab = "Sample Size (n)", ylab = "Success Rate",
main = "Edge Recovery Performance")
plot(N_range, results_list[["4"]]$Success_range, type = "l", col = 1,
ylim = c(0, 1), xlab = "Sample Size (n)", ylab = "Success Rate",
main = "Edge Recovery Performance")
plot(N_range, results_list[["4"]]$Success_range, type = "c", col = 1,
ylim = c(0, 1), xlab = "Sample Size (n)", ylab = "Success Rate",
main = "Edge Recovery Performance")
plot(N_range, results_list[["4"]]$Success_range, type = "b", col = 1,
ylim = c(0, 1), xlab = "Sample Size (n)", ylab = "Success Rate",
main = "Edge Recovery Performance")
plot(N_range, results_list[["4"]]$Success_range, type = "l", col = 1,
ylim = c(0, 1), xlab = "Sample Size (n)", ylab = "Success Rate",
main = "Edge Recovery Performance")
plot(N_range, results_list[["4"]]$Success_range, type = "l-", col = 1,
ylim = c(0, 1), xlab = "Sample Size (n)", ylab = "Success Rate",
main = "Edge Recovery Performance")
plot(N_range, results_list[["4"]]$Success_range, type = "l", col = 1,
ylim = c(0, 1), xlab = "Sample Size (n)", ylab = "Success Rate",
main = "Edge Recovery Performance")
plot(N_range, results_list[["4"]]$Success_range, type = "l", col = 1,
ylim = c(0, 1), xlab = "Sample Size (n)", ylab = "Success Rate",
main = "Edge Recovery Performance")
lines(N_range, results_list[["9"]]$Success_range, type = "l", col = 2)
lines(N_range, results_list[["16"]]$Success_range, type = "l", col = 3)
lines(N_range, results_list[["225"]]$Success_range, type = "l", col = 4)
legend("bottom", legend = paste("p =", p_values), col = 1:4, lty = 1, pch = 1)
legend("bottomright", legend = paste("p =", p_values), col = 1:4, lty = 1, pch = 1)
plot(N_range, results_list[["4"]]$Success_range, type = "l", col = 1,
ylim = c(0, 1), xlab = "Sample Size (n)", ylab = "Success Rate",
main = "Edge Recovery Performance")
lines(N_range, results_list[["9"]]$Success_range, type = "l", col = 2)
lines(N_range, results_list[["16"]]$Success_range, type = "l", col = 3)
lines(N_range, results_list[["225"]]$Success_range, type = "l", col = 4)
legend("bottomright", legend = paste("p =", p_values), col = 1:4, lty = 1, pch = 1)
View(results_list)
results_list[["4"]][["N_range"]]
plot(N_range[1:20], results_list[["4"]]$Success_range[1:20], type = "l", col = 1,
ylim = c(0, 1), xlab = "Sample Size (n)", ylab = "Success Rate",
main = "Edge Recovery Performance")
legend("bottomright", legend = paste("p =", p_values), col = 1:4, lty = 1, pch = 1)
View(results_list)
2e4
n
n = 10
n=9
X <- simulate_pgm_data(adj_matrix, n, omega)
View(X)
acf(X)
acf(X[,1])
acf(X[,2])
acf(X[,3], plot = F)
acf(X, plot = F)
source("~/Documents/Duke University/Courses/STA 841 Categotrical Data Analysis/Poisson-Graphical-Models/PGM_from_zero/Relationship_n_vs_auc (OPGM).R")
source("~/Documents/Duke University/Courses/STA 841 Categotrical Data Analysis/Poisson-Graphical-Models/PGM_from_zero/Relationship_n_vs_auc (OPGM).R")
source("~/Documents/Duke University/Courses/STA 841 Categotrical Data Analysis/Poisson-Graphical-Models/PGM_from_zero/Relationship_n_vs_auc (OPGM).R")
source("~/Documents/Duke University/Courses/STA 841 Categotrical Data Analysis/Poisson-Graphical-Models/PGM_from_zero/Relationship_n_vs_auc (OPGM).R")
library(XMRF)
library(pROC)
library(verification)
library(glmnet)       # For penalized GLMs
library(igraph)       # Network generation and analysis
setwd("~/Documents/Duke University/Courses/STA 841 Categotrical Data Analysis/Poisson-Graphical-Models")
purrr::walk(list.files("./PGM_from_zero/helper_fns/", pattern = "*.R$", full.names=TRUE), source,.GlobalEnv)
# Function to simulate Poisson PGM data via Gibbs sampling
simulate_pgm_data <- function(adj_matrix, n, omega, burn_in = 2*1e5) {
p <- nrow(adj_matrix)
X <- matrix(0, nrow = n, ncol = p)  # Samples in rows, variables in columns
theta <- adj_matrix * omega
x_current <- rpois(p, lambda = 1)
for (iter in 1:(burn_in + n)) {
for (s in 1:p) {
neighbors <- which(theta[s, ] != 0)
eta <- sum(theta[s, neighbors] * x_current[neighbors])
x_current[s] <- rpois(1, lambda = exp(eta))
}
if (iter > burn_in) X[iter - burn_in, ] <- x_current
}
return(X)  # No transposition
}
# fit Original Poisson Graphical Model
fit_Original_Poisson_Graphical_Model <- function(X, lambda) {  # Changed parameter name
p <- ncol(X)  # Variables in columns
adjacency <- matrix(0, p, p)
for (s in 1:p) {
fit <- glmnet(
x = X[, -s, drop = FALSE],  # All samples, other variables
y = X[, s],                 # Current variable
family = "poisson",
alpha = 1,
lambda = lambda,
standardize = TRUE
)
coefs <- as.vector(coef(fit))[-1]  # Remove intercept
adjacency[s, -s] <- (abs(coefs) > 1e-6) * 1
}
return((adjacency + t(adjacency)) / 2)  # Symmetrize
}
calculate_success_rate <- function(true_adj, pred_adj) {
all(true_adj[upper.tri(true_adj)] == pred_adj[upper.tri(pred_adj)]) * 1
}
results_list <- list() # storage results
# N_range <- c(20, 50, 70, 80, 100 * seq(from = 1, to = 15, by = 2))
# N_range <- 1e5 * seq(from = 10, to = 15, by = 2)
N_range <- c(50, 100*(1:10), 2000 * (1: 5), 1e4 * (1:5))
Norm_range <- numeric(length = length(N_range))
Success_range <- numeric(length = length(N_range))
# p_values <- c(64, 100, 169, 225)
p_values <- c(4, 9, 16)
M <- 50
omega <- -0.1         # Edge weight (negative for Poisson PGM)
for (p in p_values) {
message(paste("\nRunning experiments for p =", p))
# Generate 4-nearest neighbor lattice graph
adj_matrix <- make_lattice(length = sqrt(p), dim = 2, nei = 1) |>
as_adjacency_matrix(sparse = FALSE)
diag(adj_matrix) <- 0 # Remove self-loops
for (N in 1:length(N_range)) {
# message(paste0("Current n = ", N_range[N]))
n <- N_range[N]
tmp_AUC <- numeric(length = M)
tmp_norm <- numeric(length = M)
tmp_success <- numeric(length = M)
for (m in 1:M){
cat(paste(method, "Calculating success rate in progress (n = ", n, "): ", floor(100*(m/M)), "%", collapse=""),"\r")
flush.console()
X <- simulate_pgm_data(adj_matrix, n, omega)
THETA <- fit_Original_Poisson_Graphical_Model(X = X, lambda = sqrt(log(p) / n))
# attach result to store
tmp_norm[m] <- norm(adj_matrix-THETA, type = "F")
tmp_success[m] <- calculate_success_rate(adj_matrix, THETA)
}
Success_range[N] <- mean(tmp_success)
Norm_range[N] <- mean(tmp_norm)
}
# Store results for this p
results_list[[as.character(p)]] <- list(
p = p,
N_range = N_range,
Success_range = Success_range
)
}
# Generate 4-nearest neighbor lattice graph
adj_matrix <- make_lattice(length = sqrt(p), dim = 2, nei = 1) |>
as_adjacency_matrix(sparse = FALSE)
diag(adj_matrix) <- 0 # Remove self-loops
n = N_range[1]
N=1
tmp_AUC <- numeric(length = M)
tmp_norm <- numeric(length = M)
tmp_success <- numeric(length = M)
for (m in 1:M){
cat(paste(method, "Calculating success rate in progress (n = ", n, "): ", floor(100*(m/M)), "%", collapse=""),"\r")
flush.console()
X <- simulate_pgm_data(adj_matrix, n, omega)
THETA <- fit_Original_Poisson_Graphical_Model(X = X, lambda = sqrt(log(p) / n))
# attach result to store
tmp_norm[m] <- norm(adj_matrix-THETA, type = "F")
tmp_success[m] <- calculate_success_rate(adj_matrix, THETA)
}
source("~/Documents/Duke University/Courses/STA 841 Categotrical Data Analysis/Poisson-Graphical-Models/PGM_from_zero/Relationship_n_vs_auc (OPGM).R")
source("~/Documents/Duke University/Courses/STA 841 Categotrical Data Analysis/Poisson-Graphical-Models/PGM_from_zero/Relationship_n_vs_auc (OPGM).R")
View(results_list)
results_list[["4"]][["Success_range"]]
saveRDS(results_list, file = "./Edge_recovery_performance.RData")
# saveRDS(results_list, file = "./Edge_recovery_performance.RData")
tmp <- readRDS(file = "Edge_recovery_performance.RData")
View(tmp)
