color="white", fill="skyblue") +
geom_vline(xintercept=c(ci_95[1], ci_95[2]),
col="red", linetype="dashed") +
geom_vline(xintercept=mean_rr, col="blue", size=1) +
geom_vline(xintercept=1, col="black") +
labs(
x="Relative Risk (theta_t / theta_c)",
y="Posterior Density",
title="Posterior distribution of relative risk"
)
df_rr <- data.frame(rr=RR_samp)
ggplot(df_rr, aes(rr)) +
geom_histogram(aes(y=..density..), bins=40,
color="white", fill="skyblue") +
geom_vline(xintercept=c(ci_95[1], ci_95[2]),
col="red", linetype="dashed") +
geom_vline(xintercept=mean_rr, col="blue", size=1) +
labs(
x="Relative Risk (theta_t / theta_c)",
y="Posterior Density",
title="Posterior distribution of relative risk"
)
library(dplyr)
library(ggplot2)
stents2 <- stents %>%
mutate(
stroke_ind = ifelse(outcome=="stroke",1,0),
stent_ind  = ifelse(group=="treatment",1,0)
)
treatment_data <- filter(stents2, stent_ind==1)
control_data   <- filter(stents2, stent_ind==0)
n_t  <- nrow(treatment_data)
x_t  <- sum(treatment_data$stroke_ind)
n_c  <- nrow(control_data)
x_c  <- sum(control_data$stroke_ind)
alpha_t <- 1
beta_t  <- 1
post_alpha_t <- alpha_t + x_t
post_beta_t  <- beta_t  + (n_t - x_t)
alpha_c <- 1
beta_c  <- 1
post_alpha_c <- alpha_c + x_c
post_beta_c  <- beta_c  + (n_c - x_c)
S <- 5000
theta_t_samp <- rbeta(S, shape1=post_alpha_t, shape2=post_beta_t)
theta_c_samp <- rbeta(S, shape1=post_alpha_c, shape2=post_beta_c)
RR_samp <- theta_t_samp / theta_c_samp
mean_rr <- mean(RR_samp)
ci_95   <- quantile(RR_samp, probs=c(0.025, 0.975))
cat("Posterior mean of relative risk =", mean_rr, "\n")
cat("95% posterior credible interval = [",
ci_95[1], ", ", ci_95[2], "]\n")
df_rr <- data.frame(rr=RR_samp)
ggplot(df_rr, aes(rr)) +
geom_histogram(aes(y=..density..), bins=40,
color="white", fill="skyblue") +
geom_vline(xintercept=c(ci_95[1], ci_95[2]),
col="red", linetype="dashed") +
geom_vline(xintercept=mean_rr, col="blue", size=1) +
geom_vline(xintercept=1, col="black") +
labs(
x="Relative Risk (theta_t / theta_c)",
y="Posterior Density",
title="Posterior distribution of relative risk"
)
install.packages("C:/Users/30604/Downloads/XMRF_1.0.tar.gz", repos = NULL, type="source")
install.packages(c("glmnet", "snowfall"))
install.packages("C:/Users/30604/Downloads/XMRF_1.0.tar.gz", repos = NULL, type = "source")
knitr::opts_chunk$set(echo = TRUE)
# ====== Environment set-up =======
library(XMRF)
library(pROC)
library(verification)
library(glmnet)       # For penalized GLMs
library(igraph)       # Network generation and analysis
library(ggplot2)
library(gridExtra)
library(grid)
## ===== Set seed =====
set.seed(42)
## ===== Set work directory =====
setwd("C:/Users/30604/Desktop/Duke/STAT_841/Poisson-Graphical-Models")
purrr::walk(list.files("./helper_fns/", pattern = "*.R$", full.names=TRUE), source,.GlobalEnv)
data("brcadat")
brca <- t(processSeq(t(brcadat), PercentGenes=1)) # n = 445, p = 353
n <- ncol(brca)
p <- nrow(brca)
X <- t(as.matrix(brca))
# ===== Fit QPGM and SPGM with optim() =====
#THETA_qpgm <- fit_Quadratic_Poisson_Graphical_Model_optim(X = X, lambda = 1e3)
THETA_spgm <- fit_Sublinear_Poisson_Graphical_Model_optim(X = X, lambda = 1e3)
theta_mat <- abs(THETA_spgm)
df <- melt(theta_mat)
library(reshape2)
library(ggplot2)
theta_mat <- abs(THETA_spgm)
df <- melt(theta_mat)
colnames(df) <- c("Var1", "Var2", "value")
ggplot(df, aes(x = Var2, y = Var1, fill = value)) +
geom_tile(color = "white", size = 0.1) +
scale_fill_gradient(low = "white", high = "red") +
labs(title = "SPGM θ Matrix (TCGA miRNA Data)", x = "", y = "") +
coord_fixed() +
theme_minimal(base_size = 12) +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, size = 6),
axis.text.y = element_text(size = 6),
plot.title = element_text(hjust = 0.5, face = "bold"),
legend.position = "right")
summary(THETA_spgm)
mean(THETA_spgm)
library(reshape2)
library(ggplot2)
theta_mat <- abs(THETA_spgm*1000)
df <- melt(theta_mat)
colnames(df) <- c("Var1", "Var2", "value")
ggplot(df, aes(x = Var2, y = Var1, fill = value)) +
geom_tile(color = "white", size = 0.1) +
scale_fill_gradient(low = "white", high = "red") +
labs(title = "SPGM θ Matrix (TCGA miRNA Data)", x = "", y = "") +
coord_fixed() +
theme_minimal(base_size = 12) +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, size = 6),
axis.text.y = element_text(size = 6),
plot.title = element_text(hjust = 0.5, face = "bold"),
legend.position = "right")
View(THETA_spgm)
library(reshape2)
library(ggplot2)
theta_mat <- abs(THETA_spgm*10000)
df <- melt(theta_mat)
colnames(df) <- c("Var1", "Var2", "value")
ggplot(df, aes(x = Var2, y = Var1, fill = value)) +
geom_tile(color = "white", size = 0.1) +
scale_fill_gradient(low = "white", high = "red") +
labs(title = "SPGM θ Matrix (TCGA miRNA Data)", x = "", y = "") +
coord_fixed() +
theme_minimal(base_size = 12) +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, size = 6),
axis.text.y = element_text(size = 6),
plot.title = element_text(hjust = 0.5, face = "bold"),
legend.position = "right")
mean(df)
means(df)
mean(theta_mat)
mean(theta_mat>100)
mean(theta_mat>1000)
library(reshape2)
library(ggplot2)
theta_mat <- log(abs(THETA_spgm*10000))
df <- melt(theta_mat)
colnames(df) <- c("Var1", "Var2", "value")
ggplot(df, aes(x = Var2, y = Var1, fill = value)) +
geom_tile(color = "white", size = 0.1) +
scale_fill_gradient(low = "white", high = "red") +
labs(title = "SPGM θ Matrix (TCGA miRNA Data)", x = "", y = "") +
coord_fixed() +
theme_minimal(base_size = 12) +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, size = 6),
axis.text.y = element_text(size = 6),
plot.title = element_text(hjust = 0.5, face = "bold"),
legend.position = "right")
library(reshape2)
library(ggplot2)
mat <- abs(THETA_spgm)
df <- melt(mat)
# 绘制热图（与之前风格一致）
ggplot(df, aes(x = Var1, y = Var2, fill = value)) +
geom_tile(color = "white") +
scale_fill_gradient2(low = "white", high = "black") +
labs(title = "SPGM: Fitted θ on TCGA miRNA Data", x = NULL, y = NULL) +
theme_minimal(base_size = 14) +
theme(axis.text = element_text(size = 10),
axis.ticks = element_blank(),
legend.position = "none",
plot.title = element_text(hjust = 0.5, face = "bold", size = 12))
THETA_spgm_T <- ifelse(THETA_spgm>100,100,THETA_spgm)
THETA_spgm_T <- ifelse(THETA_spgm>100,100,THETA_spgm)
mat <- abs(THETA_spgm_T)
df <- melt(mat)
# 绘制热图（与之前风格一致）
ggplot(df, aes(x = Var1, y = Var2, fill = value)) +
geom_tile(color = "white") +
scale_fill_gradient2(low = "white", high = "black") +
labs(title = "SPGM: Fitted θ on TCGA miRNA Data", x = NULL, y = NULL) +
theme_minimal(base_size = 14) +
theme(axis.text = element_text(size = 10),
axis.ticks = element_blank(),
legend.position = "none",
plot.title = element_text(hjust = 0.5, face = "bold", size = 12))
THETA_spgm_T <- pmin(abs(THETA_spgm), 100)
# 转换为长数据格式
df <- melt(THETA_spgm_T)
# 绘图：与之前风格统一（白-黑，去图例）
ggplot(df, aes(x = Var1, y = Var2, fill = value)) +
geom_tile(color = "white") +
scale_fill_gradient2(low = "white", high = "black") +
labs(title = "SPGM: Fitted θ on TCGA miRNA Data", x = NULL, y = NULL) +
theme_minimal(base_size = 14) +
theme(axis.text = element_text(size = 10),
axis.ticks = element_blank(),
legend.position = "none",
plot.title = element_text(hjust = 0.5, face = "bold", size = 12))
library(reshape2)
library(ggplot2)
THETA_spgm_T <- log(pmin(abs(THETA_spgm), 100))
# 转换为长数据格式
df <- melt(THETA_spgm_T)
# 绘图：与之前风格统一（白-黑，去图例）
ggplot(df, aes(x = Var1, y = Var2, fill = value)) +
geom_tile(color = "white") +
scale_fill_gradient2(low = "white", high = "black") +
labs(title = "SPGM: Fitted θ on TCGA miRNA Data", x = NULL, y = NULL) +
theme_minimal(base_size = 14) +
theme(axis.text = element_text(size = 10),
axis.ticks = element_blank(),
legend.position = "none",
plot.title = element_text(hjust = 0.5, face = "bold", size = 12))
saveRDS(THETA_spgm, file = "THETA_spgm_result.rds")
# ====== Environment set-up =======
library(XMRF)
library(pROC)
library(verification)
library(glmnet)       # For penalized GLMs
library(igraph)       # Network generation and analysis
library(ggplot2)
library(gridExtra)
library(grid)
## ===== Set seed =====
set.seed(1)
## ===== Set work directory =====
setwd("~/Documents/Duke University/Courses/STA 841 Categotrical Data Analysis/Poisson-Graphical-Models")
# ====== Environment set-up =======
library(XMRF)
library(pROC)
library(verification)
library(glmnet)       # For penalized GLMs
library(igraph)       # Network generation and analysis
library(ggplot2)
library(gridExtra)
library(grid)
## ===== Set seed =====
set.seed(1)
## ===== Set work directory =====
setwd("C:/Users/30604/Desktop/Duke/STAT_841/Poisson-Graphical-Models")
purrr::walk(list.files("./PGM_from_zero/helper_fns/", pattern = "*.R$", full.names=TRUE), source,.GlobalEnv)
# ===== Simulation =====
results_list <- list()  # storage model performance result
N_range <- c(5*(4:25), 200*(1:4), 1000*(1:10))  # range of number of samples
Success_range <- numeric(length = length(N_range))  # stores the success rate
p_values <- c(4, 9, 36)
M <- 512 # number of runings per combination of (p, n)
omega <- -0.1         # Edge weight (negative for Poisson PGM)
for (p in p_values) {
message(paste("\nRunning experiments for p =", p))
# Generate 4-nearest neighbor lattice graph
adj_matrix <- make_lattice(length = sqrt(p), dim = 2, nei = 1) |>
as_adjacency_matrix(sparse = FALSE)
diag(adj_matrix) <- 0 # Remove self-loops
# Simulate data
X_all <- simulate_pgm_data(adj_matrix, n = 2*max(N_range), omega)
for (N in 1:length(N_range)) {
n <- N_range[N] # number of samples
tmp_success <- numeric(length = M)
for (m in 1:M){
# show current progress
cat(paste("Calculating success rate in progress (n = ", n, "): ", floor(100*(m/M)), "%", collapse=""),"\r")
flush.console()
# data for the m-th simulation
X <- X_all[sample(1:nrow(X_all), n, replace = FALSE), ]
# fit edges based on Original Poisson Graphical Model
THETA <- fit_Original_Poisson_Graphical_Model(X = X, lambda = 2 * sqrt(log(p) / n))
# store results
tmp_success[m] <- calculate_success_rate(adj_matrix, THETA)
}
Success_range[N] <- mean(tmp_success)
}
# Store results for this p
results_list[[as.character(p)]] <- list(
p = p,
Success_range = Success_range
)
}
purrr::walk(list.files("./helper_fns/", pattern = "*.R$", full.names=TRUE), source,.GlobalEnv)
# ====== Environment set-up =======
library(XMRF)
library(pROC)
library(verification)
library(glmnet)       # For penalized GLMs
library(igraph)       # Network generation and analysis
library(ggplot2)
library(gridExtra)
library(grid)
## ===== Set seed =====
set.seed(1)
## ===== Set work directory =====
setwd("C:/Users/30604/Desktop/Duke/STAT_841/Poisson-Graphical-Models")
purrr::walk(list.files("./helper_fns/", pattern = "*.R$", full.names=TRUE), source,.GlobalEnv)
# ===== Simulation =====
results_list <- list()  # storage model performance result
N_range <- c(5*(4:25), 200*(1:4), 1000*(1:10))  # range of number of samples
Success_range <- numeric(length = length(N_range))  # stores the success rate
p_values <- c(4, 9, 36)
M <- 512 # number of runings per combination of (p, n)
omega <- -0.1         # Edge weight (negative for Poisson PGM)
for (p in p_values) {
message(paste("\nRunning experiments for p =", p))
# Generate 4-nearest neighbor lattice graph
adj_matrix <- make_lattice(length = sqrt(p), dim = 2, nei = 1) |>
as_adjacency_matrix(sparse = FALSE)
diag(adj_matrix) <- 0 # Remove self-loops
# Simulate data
X_all <- simulate_pgm_data(adj_matrix, n = 2*max(N_range), omega)
for (N in 1:length(N_range)) {
n <- N_range[N] # number of samples
tmp_success <- numeric(length = M)
for (m in 1:M){
# show current progress
cat(paste("Calculating success rate in progress (n = ", n, "): ", floor(100*(m/M)), "%", collapse=""),"\r")
flush.console()
# data for the m-th simulation
X <- X_all[sample(1:nrow(X_all), n, replace = FALSE), ]
# fit edges based on Original Poisson Graphical Model
THETA <- fit_Original_Poisson_Graphical_Model(X = X, lambda = 2 * sqrt(log(p) / n))
# store results
tmp_success[m] <- calculate_success_rate(adj_matrix, THETA)
}
Success_range[N] <- mean(tmp_success)
}
# Store results for this p
results_list[[as.character(p)]] <- list(
p = p,
Success_range = Success_range
)
}
# ===== Draw Figures =====
result_df <- data.frame(
n = N_range,
"4" = results_list[['4']]$Success_range,
"9" = results_list[['9']]$Success_range,
"36" = results_list[['36']]$Success_range
) %>%
setNames(c("n",'p_4','p_9','p_36'))
ggplot(result_df, aes(x = n)) +
geom_line(aes(y = p_4, color = "4"), linewidth = 1.2) +
geom_line(aes(y = p_9, color = "9"), linewidth = 1.2) +
geom_line(aes(y = p_36, color = "36"), linewidth = 1.2) +
scale_color_manual(
name = "p",  # Legend title
values = c("4" = "#E69F00", "9" = "#56B4E9", "36" = "#009E73"),  # Colors
breaks = c("4", "9", "36")  # Ensures legend order: 4, 9, 36
) +
labs(
title = "Relationship Between n and Success Rate",
subtitle = "Comparing different values of dimension p",
x = "Sample Size (n)",
y = "Success Rate",
caption = "Simplified simulation replicating Yang, Eunho, et al. (2012)."
) +
theme_minimal(base_size = 12) +
theme(
plot.title = element_text(face = "bold", size = 14, hjust = 0.5),
plot.subtitle = element_text(hjust = 0.5, color = "gray50"),
legend.position = "bottom",
legend.title = element_text(face = "bold"),
panel.grid.major = element_line(color = "gray90", linewidth = 0.2),
panel.grid.minor = element_blank(),
axis.line = element_line(color = "gray50"),
axis.title = element_text(face = "bold"),
plot.caption = element_text(color = "gray50", hjust = 1)
)
# saveRDS(result_df, file = "./PGM_from_zero/RESULT_SuccessRate_vs_SampleSize/SuccessRate_vs_n.RData")
## ===== Refit model under p=36, n = 10000 =====
n = 10000
# OR set n = 3000
X <- X_all[sample(1:nrow(X_all), n, replace = FALSE), ]
THETA <- fit_Original_Poisson_Graphical_Model(X = X, lambda = 2 * sqrt(log(p) / n))
create_matrix_plot <- function(matrix, title) {
df <- reshape2::melt(matrix)
df$Var1 <- factor(df$Var1, levels = rev(unique(df$Var1)))  # Reverse y-axis levels
ggplot(df, aes(Var2, Var1, fill = value)) +
geom_tile(color = "black", linewidth = 0.2) +
scale_fill_gradient(low = "white", high = "black", guide = "none") +
scale_x_discrete(expand = c(0, 0)) +
scale_y_discrete(expand = c(0, 0)) +
labs(title = title, x = "", y = "") +
coord_fixed() +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5, face = "bold"),
panel.border = element_rect(color = "black", fill = NA),
axis.text = element_blank(),
panel.grid = element_blank())
}
# Generate plots
p1 <- create_matrix_plot(THETA, "Fitted Adjacency Matrix by OPGM")
p2 <- create_matrix_plot(adj_matrix, "True Adjacency Matrix")
# Arrange with global caption
combined <- grid.arrange(
p1, p2,
ncol = 2,
bottom = textGrob("p = 36, n = 10000",
gp = gpar(fontface = "plain", fontsize = 15),
hjust = 0.4, x = 0.5)
)
mat <- readRDS("THETA_spgm_reslut.rds")
result_df <- data.frame(
n = N_range,
"4" = results_list[['4']]$Success_range,
"9" = results_list[['9']]$Success_range,
"36" = results_list[['36']]$Success_range
) %>%
setNames(c("n",'p_4','p_9','p_36'))
ggplot(result_df, aes(x = n)) +
geom_line(aes(y = p_4, color = "4"), linewidth = 1.2) +
geom_line(aes(y = p_9, color = "9"), linewidth = 1.2) +
geom_line(aes(y = p_36, color = "36"), linewidth = 1.2) +
scale_color_manual(
name = "p",  # Legend title
values = c("4" = "#E69F00", "9" = "#56B4E9", "36" = "#009E73"),  # Colors
breaks = c("4", "9", "36")  # Ensures legend order: 4, 9, 36
) +
labs(
title = "Relationship Between n and Success Rate",
subtitle = "Comparing different values of dimension p",
x = "Sample Size (n)",
y = "Success Rate",
caption = "Simplified simulation replicating Yang, Eunho, et al. (2012)."
) +
theme_minimal(base_size = 12) +
theme(
plot.title = element_text(face = "bold", size = 14, hjust = 0.5),
plot.subtitle = element_text(hjust = 0.5, color = "gray50"),
legend.position = "bottom",
legend.title = element_text(face = "bold"),
panel.grid.major = element_line(color = "gray90", linewidth = 0.2),
panel.grid.minor = element_blank(),
axis.line = element_line(color = "gray50"),
axis.title = element_text(face = "bold"),
plot.caption = element_text(color = "gray50", hjust = 1)
)
## ===== Set work directory =====
setwd("C:/Users/30604/Desktop/Duke/STAT_841/Poisson-Graphical-Models")
mat <- readRDS("THETA_spgm_result.rds")
mat <- readRDS("THETA_spgm_result.rds")
# 确保矩阵是 numeric 类型
mat <- as.matrix(mat)
# 反转行顺序（image 默认左下角为 (1,1)）
mat_flipped <- mat[nrow(mat):1, ]
# 绘图
image(
1:ncol(mat_flipped), 1:nrow(mat_flipped),
t(mat_flipped),              # 注意 t() 转置使行列对应
col = heat.colors(100),      # 或使用其他调色板如 topo.colors, terrain.colors
xlab = "Columns", ylab = "Rows",
main = "Heatmap via image()"
)
mat <- readRDS("THETA_spgm_result.rds")
# 确保矩阵是 numeric 类型
mat <- log(as.matrix(mat))
# 反转行顺序（image 默认左下角为 (1,1)）
mat_flipped <- mat[nrow(mat):1, ]
# 绘图
image(
1:ncol(mat_flipped), 1:nrow(mat_flipped),
t(mat_flipped),              # 注意 t() 转置使行列对应
col = heat.colors(100),      # 或使用其他调色板如 topo.colors, terrain.colors
xlab = "Columns", ylab = "Rows",
main = "Heatmap via image()"
)
mat <- readRDS("THETA_spgm_result.rds")
# 确保矩阵是 numeric 类型
mat <- log(as.matrix(mat))
heatmap(
mat,
Colv = NA, Rowv = NA,        # 不做聚类（可改为 TRUE）
scale = "none",              # 不标准化数据（如需标准化可设为 "row" 或 "column"）
col = heat.colors(100),      # 可选调色板
main = "Heatmap via heatmap()"
)
# ====== Environment set-up =======
library(XMRF)
library(pROC)
library(verification)
library(glmnet)       # For penalized GLMs
library(igraph)       # Network generation and analysis
library(ggplot2)
library(gridExtra)
library(grid)
## ===== Set seed =====
set.seed(42)
## ===== Set work directory =====
setwd("C:/Users/30604/Desktop/Duke/STAT_841/Poisson-Graphical-Models")
purrr::walk(list.files("./helper_fns/", pattern = "*.R$", full.names=TRUE), source,.GlobalEnv)
data("brcadat")
brca <- t(processSeq(t(brcadat), PercentGenes=1)) # n = 445, p = 353
n <- ncol(brca)
p <- nrow(brca)
X <- t(as.matrix(brca))
# ===== Fit QPGM and SPGM with optim() =====
THETA_qpgm <- fit_Quadratic_Poisson_Graphical_Model_optim(X = X, lambda = 1e3)
#THETA_spgm <- fit_Sublinear_Poisson_Graphical_Model_optim(X = X, lambda = sqrt(log(353))/445)
saveRDS(THETA_qpgm, file = "THETA_qpgm_result")
saveRDS(THETA_qpgm, file = "THETA_qpgm_result.rds")
mat <- readRDS("THETA_qpgm_result.rds")
# 确保矩阵是 numeric 类型
mat <- log(as.matrix(mat))
heatmap(
mat,
Colv = NA, Rowv = NA,
scale = "none",
col = heat.colors(100),
main = "Heatmap via heatmap()"
)
