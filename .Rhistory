ifelse(x > R0 & x <= R,
-1/(2*(R-R0)) * x^2 + (R/(R-R0)) * x - (R0^2)/(2*(R-R0)),
(R0 + R)/2))
}
# Define R0 and R
R0 <- 1
R <- 2
source("~/Documents/Duke University/Courses/STA 841 Categotrical Data Analysis/Presentation/Figure 3.R")
# Plot the function
plot(x_values, y_values, type = "l", col = "black", lwd = 2,
xlab = "x", ylab = "B(Z; R0, R)",
main = "Plot of B(Z; R0, R) with R0 = 1 and R = 2",
xlim = c(0,1,2)
)
source("~/Documents/Duke University/Courses/STA 841 Categotrical Data Analysis/Presentation/Figure 3.R")
yX.diabetes.test<-dget(
url("https://sta602-sp25.github.io/data/yX.diabetes.test"))
n.test <- nrow(yX.diabetes.test)
y.test <- matrix(yX.diabetes.test[,1], nrow=n.test)
X.test <- matrix(yX.diabetes.test[,-1], nrow = n.test)
X.test.zs <- t(apply(X.test, MARGIN = 1, function(x){(x - mean.zs)/sd.zs}))
# data
yX<-dget(url("https://sta602-sp25.github.io/data/yX.diabetes.train"))
p <- 64
n <- nrow(yX)
y <- matrix(yX[,1], nrow=n)
X <- matrix(yX[,-1], nrow = n)
# z_score standardization
mean.zs <- apply(X, MARGIN = 2, FUN = mean)
sd.zs <- apply(X, MARGIN = 2, FUN = sd)
X.zs <- t(apply(X, MARGIN = 1, function(x){(x - mean.zs)/sd.zs}))
ridge_estimate <- function(lambda) {
solve(t(X.zs) %*% X.zs + lambda * diag(p)) %*% t(X.zs) %*% y
}
estimates <- t(sapply(0:100, ridge_estimate))
matplot(
estimates,
type = 'l',
main = "Ridge Estimates v.s. lambda",
xlab = expression(lambda),
ylab = expression(hat(beta))
)
yX.diabetes.test<-dget(
url("https://sta602-sp25.github.io/data/yX.diabetes.test"))
n.test <- nrow(yX.diabetes.test)
y.test <- matrix(yX.diabetes.test[,1], nrow=n.test)
X.test <- matrix(yX.diabetes.test[,-1], nrow = n.test)
X.test.zs <- t(apply(X.test, MARGIN = 1, function(x){(x - mean.zs)/sd.zs}))
PSS <- numeric(length = 101)
for (i in 1:101) {
coefficient <- estimates[i,]
error <- y.test - X.test.zs %*% coefficient
PSS[i] <- t(error) %*% error
}
plot(
x = 0:100,
y = PSS,
type = 'l',
main = "PSS v.s. lambda",
xlab = expression(lamdba),
ylab = "PSS"
)
abline(h = PSS[1], col='red')
PSS[1]
# question (c)
lambda.best <- (0:100)[which.min(PSS)]
beta.best <- abs(estimates[which.min(PSS),])
x.best <- colnames(yX)[-1][which.max(beta.best)]
paste0("The best value of lambda is ", lambda.best)
paste0("The x-variable with the largest effects is ", x.best)
length(0:100)
View(estimates)
0:3
#| eval: false
library(mvtnorm)
library(invgamma)
yX = readRDS(
url("https://sta602-sp25.github.io/data/yXspectroscopy.rds"))
# data
y <- matrix(yX[,1], ncol=1)
X <- matrix(yX[,-1], ncol=9)
p <- 9
n <- nrow(X)
e <- matrix(rep(1,9), ncol=1)
BETA <- NULL
SIGMA2 <- NULL
# initial value
beta <- matrix(rep(0,9), ncol=1)
s2 <- 1
n_iter <- 3e3
for (i in 1:n_iter) {
# sample beta
mean <- solve(t(X) %*% X/s2 + diag(p)) %*% (t(X)%*%y/s2 + 1/9 * e)
var <- solve(t(X) %*% X/s2 + diag(p))
beta <- t(rmvnorm(1, mean = mean, sigma = var))
# sample sigma
s2 <- rinvgamma(1, shape = n/2+1, scale = 1+0.5*t(y-X%*%beta)%*%(y-X%*%beta))
BETA <- rbind(BETA, t(beta))
SIGMA2 <- rbind(SIGMA2, s2)
}
save(BETA, SIGMA2, file = "Ex3.RDa")
#| echo: false
yX = readRDS(
url("https://sta602-sp25.github.io/data/yXspectroscopy.rds"))
# data
y <- matrix(yX[,1], ncol=1)
X <- matrix(yX[,-1], ncol=9)
load("./Ex3.RDa")
plot(
1:n_iter,
SIGMA2,
type = 'l',
main = "Trace plot for sigma^2",
ylab = expression(sigma^2),
xlab = "iteration"
)
plot(
density(SIGMA2),
main = "Density of sigma^2",
xlab = expression(sigma^2)
)
CI.post <- data.frame(
apply(BETA, MARGIN = 2, FUN = function(x){quantile(x, c(.025, .975))})
)
colnames(CI.post) <- colnames(yX)[-1]
print(CI.post)
beta.post_mode <- as.matrix(apply(BETA, MARGIN = 2, function(x){quantile(x, c(0.5))}), ncol=1)
# residual plot
y.hat <- X %*% beta.post_mode
resid <- y-y.hat
plot(
x = y.hat,
y = resid,
main = "residual v.s. y-hat",
xlab = expression(hat(y)),
ylab = "residual"
)
qqnorm(resid, pch=1)
which.min(PSS)
# question (c)
lambda.best <- (0:100)[which.min(PSS)]
beta.best <- abs(estimates[which.min(PSS),])
x.best <- colnames(yX)[-1][which.max(beta.best)]
paste0("The best value of lambda is ", lambda.best)
paste0("The x-variable with the largest effects is ", x.best)
# data
yX<-dget(url("https://sta602-sp25.github.io/data/yX.diabetes.train"))
p <- 64
n <- nrow(yX)
y <- matrix(yX[,1], nrow=n)
X <- matrix(yX[,-1], nrow = n)
# z_score standardization
mean.zs <- apply(X, MARGIN = 2, FUN = mean)
sd.zs <- apply(X, MARGIN = 2, FUN = sd)
X.zs <- t(apply(X, MARGIN = 1, function(x){(x - mean.zs)/sd.zs}))
ridge_estimate <- function(lambda) {
solve(t(X.zs) %*% X.zs + lambda * diag(p)) %*% t(X.zs) %*% y
}
estimates <- t(sapply(0:100, ridge_estimate))
matplot(
estimates,
type = 'l',
main = "Ridge Estimates v.s. lambda",
xlab = expression(lambda),
ylab = expression(hat(beta))
)
yX.diabetes.test<-dget(
url("https://sta602-sp25.github.io/data/yX.diabetes.test"))
n.test <- nrow(yX.diabetes.test)
y.test <- matrix(yX.diabetes.test[,1], nrow=n.test)
X.test <- matrix(yX.diabetes.test[,-1], nrow = n.test)
X.test.zs <- t(apply(X.test, MARGIN = 1, function(x){(x - mean.zs)/sd.zs}))
PSS <- numeric(length = 101)
for (i in 1:101) {
coefficient <- estimates[i,]
error <- y.test - X.test.zs %*% coefficient
PSS[i] <- t(error) %*% error
}
plot(
x = 0:100,
y = PSS,
type = 'l',
main = "PSS v.s. lambda",
xlab = expression(lamdba),
ylab = "PSS"
)
abline(h = PSS[1], col='red')
# question (c)
lambda.best <- (0:100)[which.min(PSS)]
beta.best <- abs(estimates[which.min(PSS),])
x.best <- colnames(yX)[-1][which.max(beta.best)]
paste0("The best value of lambda is ", lambda.best)
paste0("The x-variable with the largest effects is ", x.best)
#| eval: false
library(mvtnorm)
library(invgamma)
yX = readRDS(
url("https://sta602-sp25.github.io/data/yXspectroscopy.rds"))
# data
y <- matrix(yX[,1], ncol=1)
X <- matrix(yX[,-1], ncol=9)
p <- 9
n <- nrow(X)
e <- matrix(rep(1,9), ncol=1)
BETA <- NULL
SIGMA2 <- NULL
# initial value
beta <- matrix(rep(0,9), ncol=1)
s2 <- 1
n_iter <- 3e3
for (i in 1:n_iter) {
# sample beta
mean <- solve(t(X) %*% X/s2 + diag(p)) %*% (t(X)%*%y/s2 + 1/9 * e)
var <- solve(t(X) %*% X/s2 + diag(p))
beta <- t(rmvnorm(1, mean = mean, sigma = var))
# sample sigma
s2 <- rinvgamma(1, shape = n/2+1, scale = 1+0.5*t(y-X%*%beta)%*%(y-X%*%beta))
BETA <- rbind(BETA, t(beta))
SIGMA2 <- rbind(SIGMA2, s2)
}
save(BETA, SIGMA2, file = "Ex3.RDa")
#| echo: false
yX = readRDS(
url("https://sta602-sp25.github.io/data/yXspectroscopy.rds"))
# data
y <- matrix(yX[,1], ncol=1)
X <- matrix(yX[,-1], ncol=9)
load("./Ex3.RDa")
plot(
1:n_iter,
SIGMA2,
type = 'l',
main = "Trace plot for sigma^2",
ylab = expression(sigma^2),
xlab = "iteration"
)
#| eval: false
library(mvtnorm)
library(invgamma)
yX = readRDS(
url("https://sta602-sp25.github.io/data/yXspectroscopy.rds"))
# data
y <- matrix(yX[,1], ncol=1)
X <- matrix(yX[,-1], ncol=9)
p <- 9
n <- nrow(X)
e <- matrix(rep(1,9), ncol=1)
BETA <- NULL
SIGMA2 <- NULL
# initial value
beta <- matrix(rep(0,9), ncol=1)
s2 <- 15
n_iter <- 3e3
for (i in 1:n_iter) {
# sample beta
mean <- solve(t(X) %*% X/s2 + diag(p)) %*% (t(X)%*%y/s2 + 1/9 * e)
var <- solve(t(X) %*% X/s2 + diag(p))
beta <- t(rmvnorm(1, mean = mean, sigma = var))
# sample sigma
s2 <- rinvgamma(1, shape = n/2+1, scale = 1+0.5*t(y-X%*%beta)%*%(y-X%*%beta))
BETA <- rbind(BETA, t(beta))
SIGMA2 <- rbind(SIGMA2, s2)
}
save(BETA, SIGMA2, file = "Ex3.RDa")
#| echo: false
yX = readRDS(
url("https://sta602-sp25.github.io/data/yXspectroscopy.rds"))
# data
y <- matrix(yX[,1], ncol=1)
X <- matrix(yX[,-1], ncol=9)
load("./Ex3.RDa")
#| eval: false
library(mvtnorm)
library(invgamma)
yX = readRDS(
url("https://sta602-sp25.github.io/data/yXspectroscopy.rds"))
# data
y <- matrix(yX[,1], ncol=1)
X <- matrix(yX[,-1], ncol=9)
p <- 9
n <- nrow(X)
e <- matrix(rep(1,9), ncol=1)
BETA <- NULL
SIGMA2 <- NULL
# initial value
beta <- matrix(rep(0,9), ncol=1)
s2 <- 15
n_iter <- 3e3
for (i in 1:n_iter) {
# sample beta
mean <- solve(t(X) %*% X/s2 + diag(p)) %*% (t(X)%*%y/s2 + 1/9 * e)
var <- solve(t(X) %*% X/s2 + diag(p))
beta <- t(rmvnorm(1, mean = mean, sigma = var))
# sample sigma
s2 <- rinvgamma(1, shape = n/2+1, scale = 1+0.5*t(y-X%*%beta)%*%(y-X%*%beta))
BETA <- rbind(BETA, t(beta))
SIGMA2 <- rbind(SIGMA2, s2)
}
save(BETA, SIGMA2, file = "Ex3.RDa")
#| eval: false
library(mvtnorm)
library(invgamma)
yX = readRDS(
url("https://sta602-sp25.github.io/data/yXspectroscopy.rds"))
# data
y <- matrix(yX[,1], ncol=1)
X <- matrix(yX[,-1], ncol=9)
p <- 9
n <- nrow(X)
e <- matrix(rep(1,9), ncol=1)
BETA <- NULL
SIGMA2 <- NULL
# initial value
beta <- matrix(rep(0,9), ncol=1)
s2 <- 15
n_iter <- 3e3
for (i in 1:n_iter) {
# sample beta
mean <- solve(t(X) %*% X/s2 + diag(p)) %*% (t(X)%*%y/s2 + 1/9 * e)
var <- solve(t(X) %*% X/s2 + diag(p))
beta <- t(rmvnorm(1, mean = mean, sigma = var))
# sample sigma
s2 <- rinvgamma(1, shape = n/2+0.5, scale = 0.5+0.5*t(y-X%*%beta)%*%(y-X%*%beta))
BETA <- rbind(BETA, t(beta))
SIGMA2 <- rbind(SIGMA2, s2)
}
save(BETA, SIGMA2, file = "Ex3.RDa")
#| eval: false
library(mvtnorm)
library(invgamma)
yX = readRDS(
url("https://sta602-sp25.github.io/data/yXspectroscopy.rds"))
# data
y <- matrix(yX[,1], ncol=1)
X <- matrix(yX[,-1], ncol=9)
p <- 9
n <- nrow(X)
e <- matrix(rep(1,9), ncol=1)
BETA <- NULL
SIGMA2 <- NULL
# initial value
beta <- matrix(rep(0,9), ncol=1)
s2 <- 15
n_iter <- 3e3
for (i in 1:n_iter) {
# sample beta
mean <- solve(t(X) %*% X/s2 + diag(p)) %*% (t(X)%*%y/s2 + 1/9 * e)
var <- solve(t(X) %*% X/s2 + diag(p))
beta <- t(rmvnorm(1, mean = mean, sigma = var))
# sample sigma
s2 <- rgamma(1, shape = n/2+1, rate = 1+0.5*t(y-X%*%beta)%*%(y-X%*%beta))
BETA <- rbind(BETA, t(beta))
SIGMA2 <- rbind(SIGMA2, s2)
}
save(BETA, SIGMA2, file = "Ex3.RDa")
#| eval: false
library(mvtnorm)
library(invgamma)
yX = readRDS(
url("https://sta602-sp25.github.io/data/yXspectroscopy.rds"))
# data
y <- matrix(yX[,1], ncol=1)
X <- matrix(yX[,-1], ncol=9)
p <- 9
n <- nrow(X)
e <- matrix(rep(1,9), ncol=1)
BETA <- NULL
SIGMA2 <- NULL
# initial value
beta <- matrix(rep(0,9), ncol=1)
s2 <- 15
n_iter <- 3e3
for (i in 1:n_iter) {
# sample beta
mean <- solve(t(X) %*% X/s2 + diag(p)) %*% (t(X)%*%y/s2 + 1/9 * e)
var <- solve(t(X) %*% X/s2 + diag(p))
beta <- t(rmvnorm(1, mean = mean, sigma = var))
# sample sigma
s2 <- 1/rgamma(1, shape = n/2+1, rate = 1+0.5*t(y-X%*%beta)%*%(y-X%*%beta))
BETA <- rbind(BETA, t(beta))
SIGMA2 <- rbind(SIGMA2, s2)
}
save(BETA, SIGMA2, file = "Ex3.RDa")
#| eval: false
library(mvtnorm)
library(invgamma)
yX = readRDS(
url("https://sta602-sp25.github.io/data/yXspectroscopy.rds"))
# data
y <- matrix(yX[,1], ncol=1)
X <- matrix(yX[,-1], ncol=9)
p <- 9
n <- nrow(X)
e <- matrix(rep(1,9), ncol=1)
BETA <- NULL
SIGMA2 <- NULL
# initial value
beta <- matrix(rep(0,9), ncol=1)
s2 <- 15
n_iter <- 3e3
for (i in 1:n_iter) {
# sample beta
mean <- solve(t(X) %*% X/s2 + diag(p)) %*% (t(X)%*%y/s2 + 1/9 * e)
var <- solve(t(X) %*% X/s2 + diag(p))
beta <- t(rmvnorm(1, mean = mean, sigma = var))
# sample sigma
s2 <- rinvgamma(1, shape = n/2-1, scale = 1+0.5*t(y-X%*%beta)%*%(y-X%*%beta))
BETA <- rbind(BETA, t(beta))
SIGMA2 <- rbind(SIGMA2, s2)
}
save(BETA, SIGMA2, file = "Ex3.RDa")
#| eval: false
library(mvtnorm)
library(invgamma)
yX = readRDS(
url("https://sta602-sp25.github.io/data/yXspectroscopy.rds"))
# data
y <- matrix(yX[,1], ncol=1)
X <- matrix(yX[,-1], ncol=9)
p <- 9
n <- nrow(X)
e <- matrix(rep(1,9), ncol=1)
BETA <- NULL
SIGMA2 <- NULL
# initial value
beta <- matrix(rep(0,9), ncol=1)
s2 <- 15
n_iter <- 3e3
for (i in 1:n_iter) {
# sample beta
mean <- solve(t(X) %*% X/s2 + diag(p)) %*% (t(X)%*%y/s2 + 1/9 * e)
var <- solve(t(X) %*% X/s2 + diag(p))
beta <- t(rmvnorm(1, mean = mean, sigma = var))
# sample sigma
s2 <- rinvgamma(1, shape = n/2-1, scale = 1+0.5*t(y-X%*%beta)%*%(y-X%*%beta))
BETA <- rbind(BETA, t(beta))
SIGMA2 <- rbind(SIGMA2, s2)
}
save(BETA, SIGMA2, file = "Ex3.RDa")
#| eval: false
library(mvtnorm)
library(invgamma)
yX = readRDS(
url("https://sta602-sp25.github.io/data/yXspectroscopy.rds"))
# data
y <- matrix(yX[,1], ncol=1)
X <- matrix(yX[,-1], ncol=9)
p <- 9
n <- nrow(X)
e <- matrix(rep(1,9), ncol=1)
BETA <- NULL
SIGMA2 <- NULL
# initial value
beta <- matrix(rep(0,9), ncol=1)
s2 <- 15
n_iter <- 3e3
for (i in 1:n_iter) {
# sample beta
mean <- solve(t(X) %*% X/s2 + diag(p)) %*% (t(X)%*%y/s2 + 1/9 * e)
var <- solve(t(X) %*% X/s2 + diag(p))
beta <- t(rmvnorm(1, mean = mean, sigma = var))
# sample sigma
# s2 <- rinvgamma(1, shape = n/2-1, scale = 1+0.5*t(y-X%*%beta)%*%(y-X%*%beta))
s2 <- 1/rgamma(1, shape = n/2-1, rate = 1+0.5*t(y-X%*%beta)%*%(y-X%*%beta))
BETA <- rbind(BETA, t(beta))
SIGMA2 <- rbind(SIGMA2, s2)
}
save(BETA, SIGMA2, file = "Ex3.RDa")
#| eval: false
library(mvtnorm)
library(invgamma)
yX = readRDS(
url("https://sta602-sp25.github.io/data/yXspectroscopy.rds"))
# data
y <- matrix(yX[,1], ncol=1)
X <- matrix(yX[,-1], ncol=9)
p <- 9
n <- nrow(X)
e <- matrix(rep(1,9), ncol=1)
BETA <- NULL
SIGMA2 <- NULL
# initial value
beta <- matrix(rep(0,9), ncol=1)
s2 <- 15
n_iter <- 3e3
for (i in 1:n_iter) {
# sample beta
mean <- solve(t(X) %*% X/s2 + diag(p)) %*% (t(X)%*%y/s2 + 1/9 * e)
var <- solve(t(X) %*% X/s2 + diag(p))
beta <- t(rmvnorm(1, mean = mean, sigma = var))
# sample sigma
s2 <- rinvgamma(1, shape = n/2-1, scale = 1+0.5*t(y-X%*%beta)%*%(y-X%*%beta))
# s2 <- 1/rgamma(1, shape = n/2-1, rate = 1+0.5*t(y-X%*%beta)%*%(y-X%*%beta))
BETA <- rbind(BETA, t(beta))
SIGMA2 <- rbind(SIGMA2, s2)
}
save(BETA, SIGMA2, file = "Ex3.RDa")
# sample sigma
s2 <- 1/rgamma(1, shape = n/2+1, rate = 1+0.5*t(y-X%*%beta)%*%(y-X%*%beta))
source("~/Documents/Duke University/Courses/STA 602 Bayesian Statistics/Homework/HW7/Exercise_3.R")
load("./Ex3.RDa")
source("~/Documents/Duke University/Courses/STA 602 Bayesian Statistics/Homework/HW7/Exercise_3.R")
source("~/Documents/Duke University/Courses/STA 602 Bayesian Statistics/Homework/HW7/Exercise_3.R")
source("~/Documents/Duke University/Courses/STA 841 Categotrical Data Analysis/Poisson-Graphical-Models/PGM_from_zero/Relationship_n_vs_auc (OPGM).R")
source("~/Documents/Duke University/Courses/STA 841 Categotrical Data Analysis/Poisson-Graphical-Models/PGM_from_zero/Relationship_n_vs_auc (OPGM).R")
source("~/Documents/Duke University/Courses/STA 841 Categotrical Data Analysis/Poisson-Graphical-Models/PGM_from_zero/Relationship_n_vs_auc (OPGM).R")
source("~/Documents/Duke University/Courses/STA 841 Categotrical Data Analysis/Poisson-Graphical-Models/PGM_from_zero/Relationship_n_vs_auc (OPGM).R")
source("~/Documents/Duke University/Courses/STA 841 Categotrical Data Analysis/Poisson-Graphical-Models/PGM_from_zero/Relationship_n_vs_auc (OPGM).R")
sim <- XMRF.Sim(n = n, p = p, model = "PGM", graph.type = "scale-free")
source("~/Documents/Duke University/Courses/STA 841 Categotrical Data Analysis/Poisson-Graphical-Models/PGM_from_zero/Relationship_n_vs_auc (OPGM).R")
source("~/Documents/Duke University/Courses/STA 841 Categotrical Data Analysis/Poisson-Graphical-Models/PGM_from_zero/Relationship_n_vs_auc (OPGM).R")
source("~/Documents/Duke University/Courses/STA 841 Categotrical Data Analysis/Poisson-Graphical-Models/PGM_from_zero/Relationship_n_vs_auc (OPGM).R")
