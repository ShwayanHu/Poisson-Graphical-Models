scale_color_manual(
name = "p",  # Legend title
values = c("4" = "#E69F00", "9" = "#56B4E9", "36" = "#009E73"),  # Colors
breaks = c("4", "9", "36")  # Ensures legend order: 4, 9, 36
) +
labs(
title = "Relationship Between n and Probability",
subtitle = "Comparing different parameter values",
x = "Sample Size (n)",
y = "Probability",
caption = "Data analysis results"
) +
theme_minimal(base_size = 12) +
theme(
plot.title = element_text(face = "bold", size = 14, hjust = 0.5),
plot.subtitle = element_text(hjust = 0.5, color = "gray50"),
legend.position = "bottom",
legend.title = element_text(face = "bold"),
panel.grid.major = element_line(color = "gray90", linewidth = 0.2),
panel.grid.minor = element_blank(),
axis.line = element_line(color = "gray50"),
axis.title = element_text(face = "bold"),
plot.caption = element_text(color = "gray50", hjust = 1)
)
ggplot(result_df, aes(x = n)) +
geom_line(aes(y = p_4, color = "4"), linewidth = 1.2) +
geom_line(aes(y = p_9, color = "9"), linewidth = 1.2) +
geom_line(aes(y = p_36, color = "36"), linewidth = 1.2) +
scale_color_manual(
name = "p",  # Legend title
values = c("p = 4" = "#E69F00", "9" = "#56B4E9", "36" = "#009E73"),  # Colors
breaks = c("4", "9", "36")  # Ensures legend order: 4, 9, 36
) +
labs(
title = "Relationship Between n and Probability",
subtitle = "Comparing different parameter values",
x = "Sample Size (n)",
y = "Probability",
caption = "Data analysis results"
) +
theme_minimal(base_size = 12) +
theme(
plot.title = element_text(face = "bold", size = 14, hjust = 0.5),
plot.subtitle = element_text(hjust = 0.5, color = "gray50"),
legend.position = "bottom",
legend.title = element_text(face = "bold"),
panel.grid.major = element_line(color = "gray90", linewidth = 0.2),
panel.grid.minor = element_blank(),
axis.line = element_line(color = "gray50"),
axis.title = element_text(face = "bold"),
plot.caption = element_text(color = "gray50", hjust = 1)
)
ggplot(result_df, aes(x = n)) +
geom_line(aes(y = p_4, color = "4"), linewidth = 1.2) +
geom_line(aes(y = p_9, color = "9"), linewidth = 1.2) +
geom_line(aes(y = p_36, color = "36"), linewidth = 1.2) +
scale_color_manual(
name = "p",  # Legend title
values = c("4" = "#E69F00", "9" = "#56B4E9", "36" = "#009E73"),  # Colors
breaks = c("4", "9", "36")  # Ensures legend order: 4, 9, 36
) +
labs(
title = "Relationship Between n and Probability",
subtitle = "Comparing different parameter values",
x = "Sample Size (n)",
y = "Probability",
caption = "Data analysis results"
) +
theme_minimal(base_size = 12) +
theme(
plot.title = element_text(face = "bold", size = 14, hjust = 0.5),
plot.subtitle = element_text(hjust = 0.5, color = "gray50"),
legend.position = "bottom",
legend.title = element_text(face = "bold"),
panel.grid.major = element_line(color = "gray90", linewidth = 0.2),
panel.grid.minor = element_blank(),
axis.line = element_line(color = "gray50"),
axis.title = element_text(face = "bold"),
plot.caption = element_text(color = "gray50", hjust = 1)
)
ggplot(result_df, aes(x = n)) +
geom_line(aes(y = p_4, color = "4"), linewidth = 1.2) +
geom_line(aes(y = p_9, color = "9"), linewidth = 1.2) +
geom_line(aes(y = p_36, color = "36"), linewidth = 1.2) +
scale_color_manual(
name = "p",  # Legend title
values = c("4" = "#E69F00", "9" = "#56B4E9", "36" = "#009E73"),  # Colors
breaks = c("4", "9", "36")  # Ensures legend order: 4, 9, 36
) +
labs(
title = expression("Relationship Between " ~n ~"and Success Rate"),
subtitle = "Comparing different parameter values",
x = "Sample Size (n)",
y = "Probability",
caption = "Data analysis results"
) +
theme_minimal(base_size = 12) +
theme(
plot.title = element_text(face = "bold", size = 14, hjust = 0.5),
plot.subtitle = element_text(hjust = 0.5, color = "gray50"),
legend.position = "bottom",
legend.title = element_text(face = "bold"),
panel.grid.major = element_line(color = "gray90", linewidth = 0.2),
panel.grid.minor = element_blank(),
axis.line = element_line(color = "gray50"),
axis.title = element_text(face = "bold"),
plot.caption = element_text(color = "gray50", hjust = 1)
)
ggplot(result_df, aes(x = n)) +
geom_line(aes(y = p_4, color = "4"), linewidth = 1.2) +
geom_line(aes(y = p_9, color = "9"), linewidth = 1.2) +
geom_line(aes(y = p_36, color = "36"), linewidth = 1.2) +
scale_color_manual(
name = "p",  # Legend title
values = c("4" = "#E69F00", "9" = "#56B4E9", "36" = "#009E73"),  # Colors
breaks = c("4", "9", "36")  # Ensures legend order: 4, 9, 36
) +
labs(
title = "Relationship Between n and Success Rate",
subtitle = "Comparing different parameter values",
x = "Sample Size (n)",
y = "Success Rate",
caption = "Simplified simulation from Yang, Eunho, et al. (2012)."
) +
theme_minimal(base_size = 12) +
theme(
plot.title = element_text(face = "bold", size = 14, hjust = 0.5),
plot.subtitle = element_text(hjust = 0.5, color = "gray50"),
legend.position = "bottom",
legend.title = element_text(face = "bold"),
panel.grid.major = element_line(color = "gray90", linewidth = 0.2),
panel.grid.minor = element_blank(),
axis.line = element_line(color = "gray50"),
axis.title = element_text(face = "bold"),
plot.caption = element_text(color = "gray50", hjust = 1)
)
saveRDS(result_df, file = "./PGM_from_zero/RESULT_SuccessRate_vs_SampleSize/SuccessRate_vs_n.RData")
ggplot(result_df, aes(x = n)) +
geom_line(aes(y = p_4, color = "4"), linewidth = 1.2) +
geom_line(aes(y = p_9, color = "9"), linewidth = 1.2) +
geom_line(aes(y = p_36, color = "36"), linewidth = 1.2) +
scale_color_manual(
name = "p",  # Legend title
values = c("4" = "#E69F00", "9" = "#56B4E9", "36" = "#009E73"),  # Colors
breaks = c("4", "9", "36")  # Ensures legend order: 4, 9, 36
) +
labs(
title = "Relationship Between n and Success Rate",
subtitle = "Comparing different parameter values",
x = "Sample Size (n)",
y = "Success Rate",
caption = "Simplified simulation replicating Yang, Eunho, et al. (2012)."
) +
theme_minimal(base_size = 12) +
theme(
plot.title = element_text(face = "bold", size = 14, hjust = 0.5),
plot.subtitle = element_text(hjust = 0.5, color = "gray50"),
legend.position = "bottom",
legend.title = element_text(face = "bold"),
panel.grid.major = element_line(color = "gray90", linewidth = 0.2),
panel.grid.minor = element_blank(),
axis.line = element_line(color = "gray50"),
axis.title = element_text(face = "bold"),
plot.caption = element_text(color = "gray50", hjust = 1)
)
ggplot(result_df, aes(x = n)) +
geom_line(aes(y = p_4, color = "4"), linewidth = 1.2) +
geom_line(aes(y = p_9, color = "9"), linewidth = 1.2) +
geom_line(aes(y = p_36, color = "36"), linewidth = 1.2) +
scale_color_manual(
name = "p",  # Legend title
values = c("4" = "#E69F00", "9" = "#56B4E9", "36" = "#009E73"),  # Colors
breaks = c("4", "9", "36")  # Ensures legend order: 4, 9, 36
) +
labs(
title = "Relationship Between n and Success Rate",
subtitle = "Comparing different values of dimension p",
x = "Sample Size (n)",
y = "Success Rate",
caption = "Simplified simulation replicating Yang, Eunho, et al. (2012)."
) +
theme_minimal(base_size = 12) +
theme(
plot.title = element_text(face = "bold", size = 14, hjust = 0.5),
plot.subtitle = element_text(hjust = 0.5, color = "gray50"),
legend.position = "bottom",
legend.title = element_text(face = "bold"),
panel.grid.major = element_line(color = "gray90", linewidth = 0.2),
panel.grid.minor = element_blank(),
axis.line = element_line(color = "gray50"),
axis.title = element_text(face = "bold"),
plot.caption = element_text(color = "gray50", hjust = 1)
)
image(THETA)
image(adj_matrix)
# data for the m-th simulation
X <- X_all[sample(1:nrow(X_all), 500, replace = FALSE), ]
# fit edges based on Original Poisson Graphical Model
THETA <- fit_Original_Poisson_Graphical_Model(X = X, lambda = 2 * sqrt(log(p) / 500))
library(gridExtra)
library(gridExtra)
# Convert matrices to ggplot objects
plot_theta <- ggplot(reshape2::melt(THETA), aes(Var1, Var2, fill = value)) +
geom_tile() +
scale_fill_gradientn(colors = hcl.colors(12, "YlOrRd", rev = TRUE)) +
labs(title = "THETA Matrix") +
theme_minimal()
plot_adj <- ggplot(reshape2::melt(adj_matrix), aes(Var1, Var2, fill = value)) +
geom_tile() +
scale_fill_gradientn(colors = hcl.colors(12, "Blues", rev = TRUE)) +
labs(title = "Adjacency Matrix") +
theme_minimal()
# Arrange side by side
grid.arrange(plot_theta, plot_adj, ncol = 2)
# data for the m-th simulation
n = 3000
X <- X_all[sample(1:nrow(X_all), n, replace = FALSE), ]
# fit edges based on Original Poisson Graphical Model
THETA <- fit_Original_Poisson_Graphical_Model(X = X, lambda = 2 * sqrt(log(p) / n))
# Convert matrices to ggplot objects
plot_theta <- ggplot(reshape2::melt(THETA), aes(Var1, Var2, fill = value)) +
geom_tile() +
scale_fill_gradientn(colors = hcl.colors(12, "YlOrRd", rev = TRUE)) +
labs(title = "THETA Matrix") +
theme_minimal()
plot_adj <- ggplot(reshape2::melt(adj_matrix), aes(Var1, Var2, fill = value)) +
geom_tile() +
scale_fill_gradientn(colors = hcl.colors(12, "Blues", rev = TRUE)) +
labs(title = "Adjacency Matrix") +
theme_minimal()
# Arrange side by side
grid.arrange(plot_theta, plot_adj, ncol = 2)
# Function to create B&W heatmap without legend
create_bw_heatmap <- function(matrix, title) {
ggplot(reshape2::melt(matrix), aes(Var1, Var2, fill = value)) +
geom_tile() +
scale_fill_gradient(low = "white", high = "black", guide = "none") +  # B&W + no legend
labs(title = title) +
theme_void() +  # Remove axes, background
theme(plot.title = element_text(hjust = 0.5, face = "bold"))  # Centered title
}
# Generate plots
p1 <- create_bw_heatmap(THETA, "THETA")
p2 <- create_bw_heatmap(adj_matrix, "Adjacency Matrix")
# Arrange side by side
grid.arrange(p1, p2, ncol = 2)
# Function to create B&W heatmap without legend
create_bw_heatmap <- function(matrix, title) {
ggplot(reshape2::melt(matrix), aes(Var1, Var2, fill = value)) +
geom_tile() +
scale_fill_gradient(low = "white", high = "black", guide = "none") +  # B&W + no legend
labs(
title = title,
) +
theme_classic() +  # Remove axes, background
theme(plot.title = element_text(hjust = 0.5, face = "bold"))  # Centered title
}
# Generate plots
p1 <- create_bw_heatmap(THETA, "THETA")
p2 <- create_bw_heatmap(adj_matrix, "Adjacency Matrix")
# Arrange side by side
grid.arrange(p1, p2, ncol = 2)
# Function to create B&W heatmap without legend
create_bw_heatmap <- function(matrix, title) {
ggplot(reshape2::melt(matrix), aes(Var1, Var2, fill = value)) +
geom_tile() +
scale_fill_gradient(low = "white", high = "black", guide = "none") +  # B&W + no legend
labs(
title = title,
) +
theme_bw() +  # Remove axes, background
theme(plot.title = element_text(hjust = 0.5, face = "bold"))  # Centered title
}
# Generate plots
p1 <- create_bw_heatmap(THETA, "THETA")
p2 <- create_bw_heatmap(adj_matrix, "Adjacency Matrix")
# Arrange side by side
grid.arrange(p1, p2, ncol = 2)
# Function to create B&W heatmap without legend
create_bw_heatmap <- function(matrix, title) {
ggplot(reshape2::melt(matrix), aes(Var1, Var2, fill = value)) +
geom_tile() +
scale_fill_gradient(low = "white", high = "black", guide = "none") +  # B&W + no legend
labs(
title = title,
) +
# theme_bw() +  # Remove axes, background
theme(plot.title = element_text(hjust = 0.5, face = "bold"))  # Centered title
}
# Generate plots
p1 <- create_bw_heatmap(THETA, "THETA")
p2 <- create_bw_heatmap(adj_matrix, "Adjacency Matrix")
# Arrange side by side
grid.arrange(p1, p2, ncol = 2)
# Function to create B&W heatmap without legend
create_bw_heatmap <- function(matrix, title) {
ggplot(reshape2::melt(matrix), aes(Var1, Var2, fill = value)) +
geom_tile() +
scale_fill_gradient(low = "white", high = "black", guide = "none") +  # B&W + no legend
labs(
title = title,
) +
theme_bw() +
theme(plot.title = element_text(hjust = 0.5, face = "bold"))  # Centered title
}
# Generate plots
p1 <- create_bw_heatmap(THETA, "THETA")
p2 <- create_bw_heatmap(adj_matrix, "Adjacency Matrix")
# Arrange side by side
grid.arrange(p1, p2, ncol = 2)
# Function to create B&W heatmap without legend
create_bw_heatmap <- function(matrix, title) {
ggplot(reshape2::melt(matrix), aes(Var1, Var2, fill = value)) +
geom_tile() +
scale_fill_gradient(low = "white", high = "black", guide = "none") +  # B&W + no legend
labs(
title = title,
) +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5, face = "bold"))  # Centered title
}
# Generate plots
p1 <- create_bw_heatmap(THETA, "THETA")
p2 <- create_bw_heatmap(adj_matrix, "Adjacency Matrix")
# Arrange side by side
grid.arrange(p1, p2, ncol = 2)
create_bw_heatmap <- function(matrix, title) {
ggplot(reshape2::melt(matrix), aes(Var1, Var2, fill = value)) +
geom_tile(color = "black", linewidth = 0.2) +  # Add black borders to tiles
scale_fill_gradient(low = "white", high = "black", guide = "none") +
labs(title = title) +
theme_void() +
theme(plot.title = element_text(hjust = 0.5, face = "bold"),
panel.border = element_rect(color = "black", fill = NA, linewidth = 0.5))  # Outer border
}
# Generate plots
p1 <- create_bw_heatmap(THETA, "THETA")
p2 <- create_bw_heatmap(adj_matrix, "Adjacency Matrix")
# Arrange side by side
grid.arrange(p1, p2, ncol = 2)
create_matrix_plot <- function(matrix, title) {
df <- reshape2::melt(matrix)
df$Var1 <- factor(df$Var1, levels = rev(unique(df$Var1)))  # Reverse y-axis levels
ggplot(df, aes(Var2, Var1, fill = value)) +  # Note: Var2 (x), Var1 (y)
geom_tile(color = "black", linewidth = 0.2) +
scale_fill_gradient(low = "white", high = "black", guide = "none") +
scale_x_discrete(expand = c(0, 0)) +       # Remove padding
scale_y_discrete(expand = c(0, 0)) +       # Remove padding
labs(title = title, x = "", y = "") +
coord_fixed() +                            # Square tiles
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5, face = "bold"),
panel.border = element_rect(color = "black", fill = NA),
axis.text = element_blank(),          # Hide axis labels
panel.grid = element_blank())
}
# Generate plots
p1 <- create_matrix_plot(THETA, "THETA")
p2 <- create_matrix_plot(adj_matrix, "Adjacency Matrix")
# Arrange side by side
grid.arrange(p1, p2, ncol = 2)
create_matrix_plot <- function(matrix, title) {
df <- reshape2::melt(matrix)
df$Var1 <- factor(df$Var1, levels = rev(unique(df$Var1)))  # Reverse y-axis levels
ggplot(df, aes(Var2, Var1, fill = value)) +
geom_tile(color = "black", linewidth = 0.2) +
scale_fill_gradient(low = "white", high = "black", guide = "none") +
scale_x_discrete(expand = c(0, 0)) +
scale_y_discrete(expand = c(0, 0)) +
labs(title = title, x = "", y = "") +
coord_fixed() +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5, face = "bold"),
panel.border = element_rect(color = "black", fill = NA),
axis.text = element_blank(),
panel.grid = element_blank())
}
# Generate plots
p1 <- create_matrix_plot(THETA, "Fitted Adjacency Matrix by OPGM")
p2 <- create_matrix_plot(adj_matrix, "True Adjacency Matrix")
# Arrange with global caption
combined <- grid.arrange(
p1, p2,
ncol = 2,
bottom = textGrob("p = 36, n = 3000",
gp = gpar(fontface = "plain", fontsize = 10),
hjust = 0.5, x = 0.5)
)
library(grid)
create_matrix_plot <- function(matrix, title) {
df <- reshape2::melt(matrix)
df$Var1 <- factor(df$Var1, levels = rev(unique(df$Var1)))  # Reverse y-axis levels
ggplot(df, aes(Var2, Var1, fill = value)) +
geom_tile(color = "black", linewidth = 0.2) +
scale_fill_gradient(low = "white", high = "black", guide = "none") +
scale_x_discrete(expand = c(0, 0)) +
scale_y_discrete(expand = c(0, 0)) +
labs(title = title, x = "", y = "") +
coord_fixed() +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5, face = "bold"),
panel.border = element_rect(color = "black", fill = NA),
axis.text = element_blank(),
panel.grid = element_blank())
}
# Generate plots
p1 <- create_matrix_plot(THETA, "Fitted Adjacency Matrix by OPGM")
p2 <- create_matrix_plot(adj_matrix, "True Adjacency Matrix")
# Arrange with global caption
combined <- grid.arrange(
p1, p2,
ncol = 2,
bottom = textGrob("p = 36, n = 3000",
gp = gpar(fontface = "plain", fontsize = 10),
hjust = 0.5, x = 0.5)
)
# Arrange with global caption
combined <- grid.arrange(
p1, p2,
ncol = 2,
bottom = textGrob("p = 36, n = 3000",
gp = gpar(fontface = "plain", fontsize = 13),
hjust = 1, x = 0.5)
)
# Arrange with global caption
combined <- grid.arrange(
p1, p2,
ncol = 2,
bottom = textGrob("p = 36, n = 3000",
gp = gpar(fontface = "plain", fontsize = 13),
hjust = 0.5, x = 0.5)
)
# Arrange with global caption
combined <- grid.arrange(
p1, p2,
ncol = 2,
bottom = textGrob("p = 36, n = 3000",
gp = gpar(fontface = "plain", fontsize = 15),
hjust = 0.5, x = 0.5)
)
# Arrange with global caption
combined <- grid.arrange(
p1, p2,
ncol = 2,
bottom = textGrob("p = 36, n = 3000",
gp = gpar(fontface = "plain", fontsize = 15),
hjust = 0.5, x = 1)
)
# Arrange with global caption
combined <- grid.arrange(
p1, p2,
ncol = 2,
bottom = textGrob("p = 36, n = 3000",
gp = gpar(fontface = "plain", fontsize = 15),
hjust = 0.5, x = 0.5)
)
# Arrange with global caption
combined <- grid.arrange(
p1, p2,
ncol = 2,
bottom = textGrob("p = 36, n = 3000",
gp = gpar(fontface = "plain", fontsize = 15),
hjust = 0.8, x = 0.5)
)
# Arrange with global caption
combined <- grid.arrange(
p1, p2,
ncol = 2,
bottom = textGrob("p = 36, n = 3000",
gp = gpar(fontface = "plain", fontsize = 15),
hjust = 0.4, x = 0.5)
)
# data for the m-th simulation
n = 10000
X <- X_all[sample(1:nrow(X_all), n, replace = FALSE), ]
# fit edges based on Original Poisson Graphical Model
THETA <- fit_Original_Poisson_Graphical_Model(X = X, lambda = 2 * sqrt(log(p) / n))
create_matrix_plot <- function(matrix, title) {
df <- reshape2::melt(matrix)
df$Var1 <- factor(df$Var1, levels = rev(unique(df$Var1)))  # Reverse y-axis levels
ggplot(df, aes(Var2, Var1, fill = value)) +
geom_tile(color = "black", linewidth = 0.2) +
scale_fill_gradient(low = "white", high = "black", guide = "none") +
scale_x_discrete(expand = c(0, 0)) +
scale_y_discrete(expand = c(0, 0)) +
labs(title = title, x = "", y = "") +
coord_fixed() +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5, face = "bold"),
panel.border = element_rect(color = "black", fill = NA),
axis.text = element_blank(),
panel.grid = element_blank())
}
# Generate plots
p1 <- create_matrix_plot(THETA, "Fitted Adjacency Matrix by OPGM")
p2 <- create_matrix_plot(adj_matrix, "True Adjacency Matrix")
# Arrange with global caption
combined <- grid.arrange(
p1, p2,
ncol = 2,
bottom = textGrob("p = 36, n = 3000",
gp = gpar(fontface = "plain", fontsize = 15),
hjust = 0.4, x = 0.5)
)
# Arrange with global caption
combined <- grid.arrange(
p1, p2,
ncol = 2,
bottom = textGrob("p = 36, n = 10000",
gp = gpar(fontface = "plain", fontsize = 15),
hjust = 0.4, x = 0.5)
)
