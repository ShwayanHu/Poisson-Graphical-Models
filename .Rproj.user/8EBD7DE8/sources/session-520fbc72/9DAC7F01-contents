QPGM <- function(X, method = "QPGM", R = max(X), stability = "bootstrap", N = 100, 
                 beta = 0.05, lmin = 0.00001, lambda.path = NULL, nlams = 20, 
                 ncores = 4, parallel = FALSE, sth = 0.8) {
  
  # 1. Input validation and design matrix expansion
  if (!is.matrix(X)) X <- as.matrix(X)
  if (!is.numeric(X)) stop("Input must be numeric matrix")
  
  # Create expanded design matrix (quadratic + interactions)
  expand_matrix <- function(X) {
    X_sq <- X^2
    p <- ncol(X)
    interact_idx <- combn(p, 2, simplify = FALSE)
    X_interact <- do.call(cbind, lapply(interact_idx, function(ij) X[,ij[1]]*X[,ij[2]]))
    cbind(X, X_sq, X_interact)
  }
  Xq <- expand_matrix(X)
  
  # 2. Lambda path computation (using expanded features)
  if (is.null(lambda.path)) {
    lmax <- lambdaMax(t(Xq))  # Critical: Use expanded matrix
    lambda.path <- exp(seq(log(lmax), log(lmin), length.out = nlams))
  }
  
  # 3. Initialize results storage
  ghat <- list()
  ghat.path <- list()
  ghat.path$path <- vector("list", length(lambda.path))
  ghat.path$D <- list()
  
  # 4. Stability selection implementation
  wrapper <- function(i) {
    index <- sample(ncol(X), ncol(X), replace = TRUE)
    X_subsample <- Xq[, index, drop = FALSE]
    
    # Use QPGM.network instead of PGM.network
    network <- QPGM.network(X_subsample, R = R, nlams = length(lambda.path),
                            lambda = lambda.path, parallel = FALSE, ncores = 1)
    
    # Threshold and binarize edges
    lapply(network, function(adj) {
      adj[abs(adj) > 1e-6] <- 1
      adj[abs(adj) <= 1e-6] <- 0
      diag(adj) <- 0
      adj
    })
  }
  
  # 5. Parallel/sequential execution
  if (parallel) {
    ghat.path$raw <- parallel::mclapply(1:N, wrapper, mc.cores = ncores)
  } else {
    ghat.path$raw <- lapply(1:N, wrapper)
  }
  
  # 6. Aggregate results
  for (j in seq_along(lambda.path)) {
    ghat.path$path[[j]] <- Reduce(`+`, lapply(ghat.path$raw, `[[`, j)) / N
  }
  
  # 7. Compute stability scores
  if (stability == "bootstrap") {
    ghat$D <- ghat.path$path
    v <- NULL
  } else {  # STAR stability
    ghat$D <- lapply(ghat.path$path, function(D) 2 * D * (1 - D))
    v <- sapply(ghat$D, function(D) mean(D[upper.tri(D)]))
    v <- cummax(v)
  }
  
  # 8. Final network estimation
  ghat$network <- QPGM.network(Xq, R = R, nlams = length(lambda.path),
                               lambda = lambda.path, parallel = parallel, 
                               ncores = ncores)
  
  # 9. Prepare output
  ghat$lambda.path <- lambda.path
  ghat$opt.lambda <- if (stability == "bootstrap") {
    lambda.path[1]
  } else {
    lambda.path[which.max(v[v < beta])]
  }
  
  class(ghat) <- "GMS"
  return(ghat)
}