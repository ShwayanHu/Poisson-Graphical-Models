QPGM.network <- function(X, R = max(X), nlams = 10, lambda = NULL, parallel = TRUE, ncores = NULL) {
  
  # 1. Expand design matrix with quadratic and interaction terms
  expand_design_matrix <- function(X) {
    X_sq <- X^2  # Quadratic terms
    p <- ncol(X)
    interact_cols <- combn(p, 2, simplify = FALSE)
    X_interact <- do.call(cbind, lapply(interact_cols, function(ij) X[, ij[1]] * X[, ij[2]]))
    cbind(X, X_sq, X_interact)
  }
  
  X_expanded <- expand_design_matrix(X)
  
  # 2. Initialize result array with expanded dimensions
  ghat <- array(0, dim = c(nrow(X), nrow(X), ifelse(is.null(lambda), nlams, length(lambda))))
  
  # 3. Compute lambda path if not provided (using expanded features)
  if(is.null(lambda)) {
    lmax <- lambdaMax(t(X_expanded))  # Critical: Use expanded matrix
    lambda <- exp(seq(log(lmax), log(0.01*lmax), length.out = nlams))
  }
  
  # 4. Define wrapper for neighborhood selection
  wrapper <- function(i) {
    # Prepare predictors (all other nodes + their quadratic/interaction terms)
    X_other <- X_expanded[-i, , drop = FALSE] 
    y <- X[i, , drop = FALSE]
    
    # Fit QPGM neighborhood model
    fit <- QPGM.path.neighborhood(t(X_other), y, 
                                  nlams = length(lambda),
                                  lambda = lambda,
                                  startb = 0)
    
    # Store coefficients (handling expanded features)
    beta_matrix <- as.matrix(fit$Bmat[1:ncol(X), ])  # Keep only linear terms for network
    
    # Populate ghat array
    if(i == 1) {
      ghat[i, 2:nrow(X), ] <- beta_matrix
    } else if(i == nrow(X)) {
      ghat[i, 1:(nrow(X)-1), ] <- beta_matrix
    } else {
      ghat[i, 1:(i-1), ] <- beta_matrix[1:(i-1), ]
      ghat[i, (i+1):nrow(X), ] <- beta_matrix[i:nrow(beta_matrix), ]
    }
    return(ghat[i, , ])
  }
  
  # 5. Parallel/sequential execution
  if(parallel && requireNamespace("parallel", quietly = TRUE)) {
    if(is.null(ncores)) ncores <- parallel::detectCores() - 1
    ghat_list <- parallel::mclapply(1:nrow(X), wrapper, mc.cores = ncores)
  } else {
    ghat_list <- lapply(1:nrow(X), wrapper)
  }
  
  # 6. Combine results
  for(i in 1:nrow(X)) {
    ghat[i, , ] <- ghat_list[[i]]
  }
  
  # 7. Return as list of adjacency matrices
  lapply(1:dim(ghat)[3], function(r) {
    adj <- ghat[ , , r]
    diag(adj) <- 0  # Ensure zero diagonal
    adj
  })
}